// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameBaseMsg.proto

#ifndef PROTOBUF_GameBaseMsg_2eproto__INCLUDED
#define PROTOBUF_GameBaseMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace framework {
namespace gamebase {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameBaseMsg_2eproto();
void protobuf_AssignDesc_GameBaseMsg_2eproto();
void protobuf_ShutdownFile_GameBaseMsg_2eproto();

class ErrorMsg;
class EnterGameRequst;
class userdata;
class EnterGameReponse;
class EnterGameBroadcast;
class BeReadyBroadcast;
class UserSitdownRequst;
class UserSitdownBroadcast;
class UserSitupBroadcast;
class ExitGameBroadcast;
class UserStatusBroadcast;
class PushErrorMsg;
class UserChat;

// ===================================================================

class ErrorMsg : public ::google::protobuf::Message {
 public:
  ErrorMsg();
  virtual ~ErrorMsg();

  ErrorMsg(const ErrorMsg& from);

  inline ErrorMsg& operator=(const ErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorMsg& default_instance();

  void Swap(ErrorMsg* other);

  // implements Message ----------------------------------------------

  ErrorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorMsg& from);
  void MergeFrom(const ErrorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // required string errmsg = 3 [default = ""];
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // optional int32 mcmd = 4 [default = -1];
  inline bool has_mcmd() const;
  inline void clear_mcmd();
  static const int kMcmdFieldNumber = 4;
  inline ::google::protobuf::int32 mcmd() const;
  inline void set_mcmd(::google::protobuf::int32 value);

  // optional int32 scmd = 5 [default = -1];
  inline bool has_scmd() const;
  inline void clear_scmd();
  static const int kScmdFieldNumber = 5;
  inline ::google::protobuf::int32 scmd() const;
  inline void set_scmd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.ErrorMsg)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_mcmd();
  inline void clear_has_mcmd();
  inline void set_has_scmd();
  inline void clear_has_scmd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  ::google::protobuf::int32 mcmd_;
  ::google::protobuf::int32 scmd_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static ErrorMsg* default_instance_;
};
// -------------------------------------------------------------------

class EnterGameRequst : public ::google::protobuf::Message {
 public:
  EnterGameRequst();
  virtual ~EnterGameRequst();

  EnterGameRequst(const EnterGameRequst& from);

  inline EnterGameRequst& operator=(const EnterGameRequst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGameRequst& default_instance();

  void Swap(EnterGameRequst* other);

  // implements Message ----------------------------------------------

  EnterGameRequst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGameRequst& from);
  void MergeFrom(const EnterGameRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // optional int32 privateid = 4 [default = 0];
  inline bool has_privateid() const;
  inline void clear_privateid();
  static const int kPrivateidFieldNumber = 4;
  inline ::google::protobuf::int32 privateid() const;
  inline void set_privateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.EnterGameRequst)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_privateid();
  inline void clear_has_privateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 privateid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static EnterGameRequst* default_instance_;
};
// -------------------------------------------------------------------

class userdata : public ::google::protobuf::Message {
 public:
  userdata();
  virtual ~userdata();

  userdata(const userdata& from);

  inline userdata& operator=(const userdata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userdata& default_instance();

  void Swap(userdata* other);

  // implements Message ----------------------------------------------

  userdata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userdata& from);
  void MergeFrom(const userdata& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 seatid = 5;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 5;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.userdata)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 seatid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static userdata* default_instance_;
};
// -------------------------------------------------------------------

class EnterGameReponse : public ::google::protobuf::Message {
 public:
  EnterGameReponse();
  virtual ~EnterGameReponse();

  EnterGameReponse(const EnterGameReponse& from);

  inline EnterGameReponse& operator=(const EnterGameReponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGameReponse& default_instance();

  void Swap(EnterGameReponse* other);

  // implements Message ----------------------------------------------

  EnterGameReponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGameReponse& from);
  void MergeFrom(const EnterGameReponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 gold = 2;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 2;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // required int32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // required int32 viplevel = 4;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 4;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // required int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 seatid = 6;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 6;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required int32 tableid = 7;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 7;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required string info = 8;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 8;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // repeated .com.framework.gamebase.userdata users = 9;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 9;
  inline const ::com::framework::gamebase::userdata& users(int index) const;
  inline ::com::framework::gamebase::userdata* mutable_users(int index);
  inline ::com::framework::gamebase::userdata* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::com::framework::gamebase::userdata >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::framework::gamebase::userdata >*
      mutable_users();

  // optional int32 playercount = 10;
  inline bool has_playercount() const;
  inline void clear_playercount();
  static const int kPlayercountFieldNumber = 10;
  inline ::google::protobuf::int32 playercount() const;
  inline void set_playercount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.EnterGameReponse)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_playercount();
  inline void clear_has_playercount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 seatid_;
  ::std::string* info_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 playercount_;
  ::google::protobuf::RepeatedPtrField< ::com::framework::gamebase::userdata > users_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static EnterGameReponse* default_instance_;
};
// -------------------------------------------------------------------

class EnterGameBroadcast : public ::google::protobuf::Message {
 public:
  EnterGameBroadcast();
  virtual ~EnterGameBroadcast();

  EnterGameBroadcast(const EnterGameBroadcast& from);

  inline EnterGameBroadcast& operator=(const EnterGameBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterGameBroadcast& default_instance();

  void Swap(EnterGameBroadcast* other);

  // implements Message ----------------------------------------------

  EnterGameBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterGameBroadcast& from);
  void MergeFrom(const EnterGameBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // required int32 seatid = 5;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 5;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.EnterGameBroadcast)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 seatid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static EnterGameBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class BeReadyBroadcast : public ::google::protobuf::Message {
 public:
  BeReadyBroadcast();
  virtual ~BeReadyBroadcast();

  BeReadyBroadcast(const BeReadyBroadcast& from);

  inline BeReadyBroadcast& operator=(const BeReadyBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeReadyBroadcast& default_instance();

  void Swap(BeReadyBroadcast* other);

  // implements Message ----------------------------------------------

  BeReadyBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeReadyBroadcast& from);
  void MergeFrom(const BeReadyBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.BeReadyBroadcast)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static BeReadyBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class UserSitdownRequst : public ::google::protobuf::Message {
 public:
  UserSitdownRequst();
  virtual ~UserSitdownRequst();

  UserSitdownRequst(const UserSitdownRequst& from);

  inline UserSitdownRequst& operator=(const UserSitdownRequst& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSitdownRequst& default_instance();

  void Swap(UserSitdownRequst* other);

  // implements Message ----------------------------------------------

  UserSitdownRequst* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSitdownRequst& from);
  void MergeFrom(const UserSitdownRequst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 seatid = 2;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 2;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.UserSitdownRequst)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_seatid();
  inline void clear_has_seatid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 seatid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static UserSitdownRequst* default_instance_;
};
// -------------------------------------------------------------------

class UserSitdownBroadcast : public ::google::protobuf::Message {
 public:
  UserSitdownBroadcast();
  virtual ~UserSitdownBroadcast();

  UserSitdownBroadcast(const UserSitdownBroadcast& from);

  inline UserSitdownBroadcast& operator=(const UserSitdownBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSitdownBroadcast& default_instance();

  void Swap(UserSitdownBroadcast* other);

  // implements Message ----------------------------------------------

  UserSitdownBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSitdownBroadcast& from);
  void MergeFrom(const UserSitdownBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 seatid = 3;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 3;
  inline ::google::protobuf::int32 seatid() const;
  inline void set_seatid(::google::protobuf::int32 value);

  // required string strinfo = 4 [default = "{}"];
  inline bool has_strinfo() const;
  inline void clear_strinfo();
  static const int kStrinfoFieldNumber = 4;
  inline const ::std::string& strinfo() const;
  inline void set_strinfo(const ::std::string& value);
  inline void set_strinfo(const char* value);
  inline void set_strinfo(const char* value, size_t size);
  inline ::std::string* mutable_strinfo();
  inline ::std::string* release_strinfo();
  inline void set_allocated_strinfo(::std::string* strinfo);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.UserSitdownBroadcast)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_strinfo();
  inline void clear_has_strinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  static ::std::string* _default_strinfo_;
  ::std::string* strinfo_;
  ::google::protobuf::int32 seatid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static UserSitdownBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class UserSitupBroadcast : public ::google::protobuf::Message {
 public:
  UserSitupBroadcast();
  virtual ~UserSitupBroadcast();

  UserSitupBroadcast(const UserSitupBroadcast& from);

  inline UserSitupBroadcast& operator=(const UserSitupBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserSitupBroadcast& default_instance();

  void Swap(UserSitupBroadcast* other);

  // implements Message ----------------------------------------------

  UserSitupBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserSitupBroadcast& from);
  void MergeFrom(const UserSitupBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.UserSitupBroadcast)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static UserSitupBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class ExitGameBroadcast : public ::google::protobuf::Message {
 public:
  ExitGameBroadcast();
  virtual ~ExitGameBroadcast();

  ExitGameBroadcast(const ExitGameBroadcast& from);

  inline ExitGameBroadcast& operator=(const ExitGameBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExitGameBroadcast& default_instance();

  void Swap(ExitGameBroadcast* other);

  // implements Message ----------------------------------------------

  ExitGameBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExitGameBroadcast& from);
  void MergeFrom(const ExitGameBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 tableid = 2;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 2;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.ExitGameBroadcast)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_tableid();
  inline void clear_has_tableid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static ExitGameBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class UserStatusBroadcast : public ::google::protobuf::Message {
 public:
  UserStatusBroadcast();
  virtual ~UserStatusBroadcast();

  UserStatusBroadcast(const UserStatusBroadcast& from);

  inline UserStatusBroadcast& operator=(const UserStatusBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserStatusBroadcast& default_instance();

  void Swap(UserStatusBroadcast* other);

  // implements Message ----------------------------------------------

  UserStatusBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserStatusBroadcast& from);
  void MergeFrom(const UserStatusBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 userstatus = 2;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserstatusFieldNumber = 2;
  inline ::google::protobuf::int32 userstatus() const;
  inline void set_userstatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.UserStatusBroadcast)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 userstatus_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static UserStatusBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class PushErrorMsg : public ::google::protobuf::Message {
 public:
  PushErrorMsg();
  virtual ~PushErrorMsg();

  PushErrorMsg(const PushErrorMsg& from);

  inline PushErrorMsg& operator=(const PushErrorMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PushErrorMsg& default_instance();

  void Swap(PushErrorMsg* other);

  // implements Message ----------------------------------------------

  PushErrorMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PushErrorMsg& from);
  void MergeFrom(const PushErrorMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 errcode = 2;
  inline bool has_errcode() const;
  inline void clear_errcode();
  static const int kErrcodeFieldNumber = 2;
  inline ::google::protobuf::int32 errcode() const;
  inline void set_errcode(::google::protobuf::int32 value);

  // required string errmsg = 3 [default = ""];
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrmsgFieldNumber = 3;
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.PushErrorMsg)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_errcode();
  inline void clear_has_errcode();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 errcode_;
  ::std::string* errmsg_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static PushErrorMsg* default_instance_;
};
// -------------------------------------------------------------------

class UserChat : public ::google::protobuf::Message {
 public:
  UserChat();
  virtual ~UserChat();

  UserChat(const UserChat& from);

  inline UserChat& operator=(const UserChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserChat& default_instance();

  void Swap(UserChat* other);

  // implements Message ----------------------------------------------

  UserChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserChat& from);
  void MergeFrom(const UserChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 senduserid = 1;
  inline bool has_senduserid() const;
  inline void clear_senduserid();
  static const int kSenduseridFieldNumber = 1;
  inline ::google::protobuf::int32 senduserid() const;
  inline void set_senduserid(::google::protobuf::int32 value);

  // required int32 targetuserid = 2;
  inline bool has_targetuserid() const;
  inline void clear_targetuserid();
  static const int kTargetuseridFieldNumber = 2;
  inline ::google::protobuf::int32 targetuserid() const;
  inline void set_targetuserid(::google::protobuf::int32 value);

  // required string jsoninfo = 3 [default = ""];
  inline bool has_jsoninfo() const;
  inline void clear_jsoninfo();
  static const int kJsoninfoFieldNumber = 3;
  inline const ::std::string& jsoninfo() const;
  inline void set_jsoninfo(const ::std::string& value);
  inline void set_jsoninfo(const char* value);
  inline void set_jsoninfo(const char* value, size_t size);
  inline ::std::string* mutable_jsoninfo();
  inline ::std::string* release_jsoninfo();
  inline void set_allocated_jsoninfo(::std::string* jsoninfo);

  // @@protoc_insertion_point(class_scope:com.framework.gamebase.UserChat)
 private:
  inline void set_has_senduserid();
  inline void clear_has_senduserid();
  inline void set_has_targetuserid();
  inline void clear_has_targetuserid();
  inline void set_has_jsoninfo();
  inline void clear_has_jsoninfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 senduserid_;
  ::google::protobuf::int32 targetuserid_;
  ::std::string* jsoninfo_;
  friend void  protobuf_AddDesc_GameBaseMsg_2eproto();
  friend void protobuf_AssignDesc_GameBaseMsg_2eproto();
  friend void protobuf_ShutdownFile_GameBaseMsg_2eproto();

  void InitAsDefaultInstance();
  static UserChat* default_instance_;
};
// ===================================================================


// ===================================================================

// ErrorMsg

// required int32 userid = 1;
inline bool ErrorMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ErrorMsg::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ErrorMsg.userid)
  return userid_;
}
inline void ErrorMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ErrorMsg.userid)
}

// required int32 errcode = 2;
inline bool ErrorMsg::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorMsg::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorMsg::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorMsg::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 ErrorMsg::errcode() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ErrorMsg.errcode)
  return errcode_;
}
inline void ErrorMsg::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ErrorMsg.errcode)
}

// required string errmsg = 3 [default = ""];
inline bool ErrorMsg::has_errmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ErrorMsg::set_has_errmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ErrorMsg::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ErrorMsg::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& ErrorMsg::errmsg() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ErrorMsg.errmsg)
  return *errmsg_;
}
inline void ErrorMsg::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ErrorMsg.errmsg)
}
inline void ErrorMsg::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.ErrorMsg.errmsg)
}
inline void ErrorMsg::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.ErrorMsg.errmsg)
}
inline ::std::string* ErrorMsg::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.ErrorMsg.errmsg)
  return errmsg_;
}
inline ::std::string* ErrorMsg::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ErrorMsg::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.ErrorMsg.errmsg)
}

// optional int32 mcmd = 4 [default = -1];
inline bool ErrorMsg::has_mcmd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ErrorMsg::set_has_mcmd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ErrorMsg::clear_has_mcmd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ErrorMsg::clear_mcmd() {
  mcmd_ = -1;
  clear_has_mcmd();
}
inline ::google::protobuf::int32 ErrorMsg::mcmd() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ErrorMsg.mcmd)
  return mcmd_;
}
inline void ErrorMsg::set_mcmd(::google::protobuf::int32 value) {
  set_has_mcmd();
  mcmd_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ErrorMsg.mcmd)
}

// optional int32 scmd = 5 [default = -1];
inline bool ErrorMsg::has_scmd() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ErrorMsg::set_has_scmd() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ErrorMsg::clear_has_scmd() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ErrorMsg::clear_scmd() {
  scmd_ = -1;
  clear_has_scmd();
}
inline ::google::protobuf::int32 ErrorMsg::scmd() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ErrorMsg.scmd)
  return scmd_;
}
inline void ErrorMsg::set_scmd(::google::protobuf::int32 value) {
  set_has_scmd();
  scmd_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ErrorMsg.scmd)
}

// -------------------------------------------------------------------

// EnterGameRequst

// required string info = 1;
inline bool EnterGameRequst::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGameRequst::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGameRequst::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGameRequst::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& EnterGameRequst::info() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameRequst.info)
  return *info_;
}
inline void EnterGameRequst::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameRequst.info)
}
inline void EnterGameRequst::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.EnterGameRequst.info)
}
inline void EnterGameRequst::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.EnterGameRequst.info)
}
inline ::std::string* EnterGameRequst::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.EnterGameRequst.info)
  return info_;
}
inline ::std::string* EnterGameRequst::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnterGameRequst::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.EnterGameRequst.info)
}

// required int32 tableid = 2;
inline bool EnterGameRequst::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGameRequst::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGameRequst::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGameRequst::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 EnterGameRequst::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameRequst.tableid)
  return tableid_;
}
inline void EnterGameRequst::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameRequst.tableid)
}

// required int32 userid = 3;
inline bool EnterGameRequst::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterGameRequst::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterGameRequst::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterGameRequst::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterGameRequst::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameRequst.userid)
  return userid_;
}
inline void EnterGameRequst::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameRequst.userid)
}

// optional int32 privateid = 4 [default = 0];
inline bool EnterGameRequst::has_privateid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterGameRequst::set_has_privateid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterGameRequst::clear_has_privateid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterGameRequst::clear_privateid() {
  privateid_ = 0;
  clear_has_privateid();
}
inline ::google::protobuf::int32 EnterGameRequst::privateid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameRequst.privateid)
  return privateid_;
}
inline void EnterGameRequst::set_privateid(::google::protobuf::int32 value) {
  set_has_privateid();
  privateid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameRequst.privateid)
}

// -------------------------------------------------------------------

// userdata

// required string info = 1;
inline bool userdata::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userdata::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userdata::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userdata::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& userdata::info() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.userdata.info)
  return *info_;
}
inline void userdata::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.userdata.info)
}
inline void userdata::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.userdata.info)
}
inline void userdata::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.userdata.info)
}
inline ::std::string* userdata::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.userdata.info)
  return info_;
}
inline ::std::string* userdata::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void userdata::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.userdata.info)
}

// required int32 tableid = 2;
inline bool userdata::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void userdata::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void userdata::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void userdata::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 userdata::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.userdata.tableid)
  return tableid_;
}
inline void userdata::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.userdata.tableid)
}

// required int32 userid = 3;
inline bool userdata::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void userdata::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void userdata::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void userdata::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 userdata::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.userdata.userid)
  return userid_;
}
inline void userdata::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.userdata.userid)
}

// required int32 status = 4;
inline bool userdata::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void userdata::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void userdata::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void userdata::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 userdata::status() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.userdata.status)
  return status_;
}
inline void userdata::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.userdata.status)
}

// required int32 seatid = 5;
inline bool userdata::has_seatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void userdata::set_has_seatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void userdata::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void userdata::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 userdata::seatid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.userdata.seatid)
  return seatid_;
}
inline void userdata::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.userdata.seatid)
}

// -------------------------------------------------------------------

// EnterGameReponse

// required int32 userid = 1;
inline bool EnterGameReponse::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGameReponse::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGameReponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGameReponse::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterGameReponse::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.userid)
  return userid_;
}
inline void EnterGameReponse::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.userid)
}

// required int32 gold = 2;
inline bool EnterGameReponse::has_gold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGameReponse::set_has_gold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGameReponse::clear_has_gold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGameReponse::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 EnterGameReponse::gold() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.gold)
  return gold_;
}
inline void EnterGameReponse::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.gold)
}

// required int32 score = 3;
inline bool EnterGameReponse::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterGameReponse::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterGameReponse::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterGameReponse::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 EnterGameReponse::score() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.score)
  return score_;
}
inline void EnterGameReponse::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.score)
}

// required int32 viplevel = 4;
inline bool EnterGameReponse::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterGameReponse::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterGameReponse::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterGameReponse::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 EnterGameReponse::viplevel() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.viplevel)
  return viplevel_;
}
inline void EnterGameReponse::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.viplevel)
}

// required int32 status = 5;
inline bool EnterGameReponse::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterGameReponse::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterGameReponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterGameReponse::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EnterGameReponse::status() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.status)
  return status_;
}
inline void EnterGameReponse::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.status)
}

// required int32 seatid = 6;
inline bool EnterGameReponse::has_seatid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EnterGameReponse::set_has_seatid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EnterGameReponse::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EnterGameReponse::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 EnterGameReponse::seatid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.seatid)
  return seatid_;
}
inline void EnterGameReponse::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.seatid)
}

// required int32 tableid = 7;
inline bool EnterGameReponse::has_tableid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EnterGameReponse::set_has_tableid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EnterGameReponse::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EnterGameReponse::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 EnterGameReponse::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.tableid)
  return tableid_;
}
inline void EnterGameReponse::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.tableid)
}

// required string info = 8;
inline bool EnterGameReponse::has_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EnterGameReponse::set_has_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EnterGameReponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EnterGameReponse::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& EnterGameReponse::info() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.info)
  return *info_;
}
inline void EnterGameReponse::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.info)
}
inline void EnterGameReponse::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.EnterGameReponse.info)
}
inline void EnterGameReponse::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.EnterGameReponse.info)
}
inline ::std::string* EnterGameReponse::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.EnterGameReponse.info)
  return info_;
}
inline ::std::string* EnterGameReponse::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnterGameReponse::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.EnterGameReponse.info)
}

// repeated .com.framework.gamebase.userdata users = 9;
inline int EnterGameReponse::users_size() const {
  return users_.size();
}
inline void EnterGameReponse::clear_users() {
  users_.Clear();
}
inline const ::com::framework::gamebase::userdata& EnterGameReponse::users(int index) const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.users)
  return users_.Get(index);
}
inline ::com::framework::gamebase::userdata* EnterGameReponse::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.EnterGameReponse.users)
  return users_.Mutable(index);
}
inline ::com::framework::gamebase::userdata* EnterGameReponse::add_users() {
  // @@protoc_insertion_point(field_add:com.framework.gamebase.EnterGameReponse.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::framework::gamebase::userdata >&
EnterGameReponse::users() const {
  // @@protoc_insertion_point(field_list:com.framework.gamebase.EnterGameReponse.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::framework::gamebase::userdata >*
EnterGameReponse::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:com.framework.gamebase.EnterGameReponse.users)
  return &users_;
}

// optional int32 playercount = 10;
inline bool EnterGameReponse::has_playercount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EnterGameReponse::set_has_playercount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EnterGameReponse::clear_has_playercount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EnterGameReponse::clear_playercount() {
  playercount_ = 0;
  clear_has_playercount();
}
inline ::google::protobuf::int32 EnterGameReponse::playercount() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameReponse.playercount)
  return playercount_;
}
inline void EnterGameReponse::set_playercount(::google::protobuf::int32 value) {
  set_has_playercount();
  playercount_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameReponse.playercount)
}

// -------------------------------------------------------------------

// EnterGameBroadcast

// required string info = 1;
inline bool EnterGameBroadcast::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterGameBroadcast::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterGameBroadcast::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterGameBroadcast::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& EnterGameBroadcast::info() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameBroadcast.info)
  return *info_;
}
inline void EnterGameBroadcast::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameBroadcast.info)
}
inline void EnterGameBroadcast::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.EnterGameBroadcast.info)
}
inline void EnterGameBroadcast::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.EnterGameBroadcast.info)
}
inline ::std::string* EnterGameBroadcast::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.EnterGameBroadcast.info)
  return info_;
}
inline ::std::string* EnterGameBroadcast::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EnterGameBroadcast::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.EnterGameBroadcast.info)
}

// required int32 tableid = 2;
inline bool EnterGameBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterGameBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterGameBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterGameBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 EnterGameBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameBroadcast.tableid)
  return tableid_;
}
inline void EnterGameBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameBroadcast.tableid)
}

// required int32 userid = 3;
inline bool EnterGameBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EnterGameBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EnterGameBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EnterGameBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 EnterGameBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameBroadcast.userid)
  return userid_;
}
inline void EnterGameBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameBroadcast.userid)
}

// required int32 status = 4;
inline bool EnterGameBroadcast::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EnterGameBroadcast::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EnterGameBroadcast::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EnterGameBroadcast::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 EnterGameBroadcast::status() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameBroadcast.status)
  return status_;
}
inline void EnterGameBroadcast::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameBroadcast.status)
}

// required int32 seatid = 5;
inline bool EnterGameBroadcast::has_seatid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EnterGameBroadcast::set_has_seatid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EnterGameBroadcast::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EnterGameBroadcast::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 EnterGameBroadcast::seatid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.EnterGameBroadcast.seatid)
  return seatid_;
}
inline void EnterGameBroadcast::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.EnterGameBroadcast.seatid)
}

// -------------------------------------------------------------------

// BeReadyBroadcast

// required int32 userid = 1;
inline bool BeReadyBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeReadyBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeReadyBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeReadyBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 BeReadyBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.BeReadyBroadcast.userid)
  return userid_;
}
inline void BeReadyBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.BeReadyBroadcast.userid)
}

// required int32 tableid = 2;
inline bool BeReadyBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeReadyBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeReadyBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeReadyBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 BeReadyBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.BeReadyBroadcast.tableid)
  return tableid_;
}
inline void BeReadyBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.BeReadyBroadcast.tableid)
}

// -------------------------------------------------------------------

// UserSitdownRequst

// required int32 tableid = 1;
inline bool UserSitdownRequst::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSitdownRequst::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSitdownRequst::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSitdownRequst::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 UserSitdownRequst::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitdownRequst.tableid)
  return tableid_;
}
inline void UserSitdownRequst::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitdownRequst.tableid)
}

// required int32 seatid = 2;
inline bool UserSitdownRequst::has_seatid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSitdownRequst::set_has_seatid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSitdownRequst::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSitdownRequst::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 UserSitdownRequst::seatid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitdownRequst.seatid)
  return seatid_;
}
inline void UserSitdownRequst::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitdownRequst.seatid)
}

// -------------------------------------------------------------------

// UserSitdownBroadcast

// required int32 userid = 1;
inline bool UserSitdownBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSitdownBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSitdownBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSitdownBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserSitdownBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitdownBroadcast.userid)
  return userid_;
}
inline void UserSitdownBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitdownBroadcast.userid)
}

// required int32 tableid = 2;
inline bool UserSitdownBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSitdownBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSitdownBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSitdownBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 UserSitdownBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitdownBroadcast.tableid)
  return tableid_;
}
inline void UserSitdownBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitdownBroadcast.tableid)
}

// required int32 seatid = 3;
inline bool UserSitdownBroadcast::has_seatid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserSitdownBroadcast::set_has_seatid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserSitdownBroadcast::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserSitdownBroadcast::clear_seatid() {
  seatid_ = 0;
  clear_has_seatid();
}
inline ::google::protobuf::int32 UserSitdownBroadcast::seatid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitdownBroadcast.seatid)
  return seatid_;
}
inline void UserSitdownBroadcast::set_seatid(::google::protobuf::int32 value) {
  set_has_seatid();
  seatid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitdownBroadcast.seatid)
}

// required string strinfo = 4 [default = "{}"];
inline bool UserSitdownBroadcast::has_strinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserSitdownBroadcast::set_has_strinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserSitdownBroadcast::clear_has_strinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserSitdownBroadcast::clear_strinfo() {
  if (strinfo_ != _default_strinfo_) {
    strinfo_->assign(*_default_strinfo_);
  }
  clear_has_strinfo();
}
inline const ::std::string& UserSitdownBroadcast::strinfo() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitdownBroadcast.strinfo)
  return *strinfo_;
}
inline void UserSitdownBroadcast::set_strinfo(const ::std::string& value) {
  set_has_strinfo();
  if (strinfo_ == _default_strinfo_) {
    strinfo_ = new ::std::string;
  }
  strinfo_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitdownBroadcast.strinfo)
}
inline void UserSitdownBroadcast::set_strinfo(const char* value) {
  set_has_strinfo();
  if (strinfo_ == _default_strinfo_) {
    strinfo_ = new ::std::string;
  }
  strinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.UserSitdownBroadcast.strinfo)
}
inline void UserSitdownBroadcast::set_strinfo(const char* value, size_t size) {
  set_has_strinfo();
  if (strinfo_ == _default_strinfo_) {
    strinfo_ = new ::std::string;
  }
  strinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.UserSitdownBroadcast.strinfo)
}
inline ::std::string* UserSitdownBroadcast::mutable_strinfo() {
  set_has_strinfo();
  if (strinfo_ == _default_strinfo_) {
    strinfo_ = new ::std::string(*_default_strinfo_);
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.UserSitdownBroadcast.strinfo)
  return strinfo_;
}
inline ::std::string* UserSitdownBroadcast::release_strinfo() {
  clear_has_strinfo();
  if (strinfo_ == _default_strinfo_) {
    return NULL;
  } else {
    ::std::string* temp = strinfo_;
    strinfo_ = const_cast< ::std::string*>(_default_strinfo_);
    return temp;
  }
}
inline void UserSitdownBroadcast::set_allocated_strinfo(::std::string* strinfo) {
  if (strinfo_ != _default_strinfo_) {
    delete strinfo_;
  }
  if (strinfo) {
    set_has_strinfo();
    strinfo_ = strinfo;
  } else {
    clear_has_strinfo();
    strinfo_ = const_cast< ::std::string*>(_default_strinfo_);
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.UserSitdownBroadcast.strinfo)
}

// -------------------------------------------------------------------

// UserSitupBroadcast

// required int32 userid = 1;
inline bool UserSitupBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserSitupBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserSitupBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserSitupBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserSitupBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitupBroadcast.userid)
  return userid_;
}
inline void UserSitupBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitupBroadcast.userid)
}

// required int32 tableid = 2;
inline bool UserSitupBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserSitupBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserSitupBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserSitupBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 UserSitupBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserSitupBroadcast.tableid)
  return tableid_;
}
inline void UserSitupBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserSitupBroadcast.tableid)
}

// -------------------------------------------------------------------

// ExitGameBroadcast

// required int32 userid = 1;
inline bool ExitGameBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExitGameBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExitGameBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExitGameBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ExitGameBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ExitGameBroadcast.userid)
  return userid_;
}
inline void ExitGameBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ExitGameBroadcast.userid)
}

// required int32 tableid = 2;
inline bool ExitGameBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExitGameBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExitGameBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExitGameBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ExitGameBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.ExitGameBroadcast.tableid)
  return tableid_;
}
inline void ExitGameBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.ExitGameBroadcast.tableid)
}

// -------------------------------------------------------------------

// UserStatusBroadcast

// required int32 userid = 1;
inline bool UserStatusBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserStatusBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserStatusBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserStatusBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserStatusBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserStatusBroadcast.userid)
  return userid_;
}
inline void UserStatusBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserStatusBroadcast.userid)
}

// required int32 userstatus = 2;
inline bool UserStatusBroadcast::has_userstatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserStatusBroadcast::set_has_userstatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserStatusBroadcast::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserStatusBroadcast::clear_userstatus() {
  userstatus_ = 0;
  clear_has_userstatus();
}
inline ::google::protobuf::int32 UserStatusBroadcast::userstatus() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserStatusBroadcast.userstatus)
  return userstatus_;
}
inline void UserStatusBroadcast::set_userstatus(::google::protobuf::int32 value) {
  set_has_userstatus();
  userstatus_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserStatusBroadcast.userstatus)
}

// -------------------------------------------------------------------

// PushErrorMsg

// required int32 userid = 1;
inline bool PushErrorMsg::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PushErrorMsg::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PushErrorMsg::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PushErrorMsg::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 PushErrorMsg::userid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.PushErrorMsg.userid)
  return userid_;
}
inline void PushErrorMsg::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.PushErrorMsg.userid)
}

// required int32 errcode = 2;
inline bool PushErrorMsg::has_errcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PushErrorMsg::set_has_errcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PushErrorMsg::clear_has_errcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PushErrorMsg::clear_errcode() {
  errcode_ = 0;
  clear_has_errcode();
}
inline ::google::protobuf::int32 PushErrorMsg::errcode() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.PushErrorMsg.errcode)
  return errcode_;
}
inline void PushErrorMsg::set_errcode(::google::protobuf::int32 value) {
  set_has_errcode();
  errcode_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.PushErrorMsg.errcode)
}

// required string errmsg = 3 [default = ""];
inline bool PushErrorMsg::has_errmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PushErrorMsg::set_has_errmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PushErrorMsg::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PushErrorMsg::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& PushErrorMsg::errmsg() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.PushErrorMsg.errmsg)
  return *errmsg_;
}
inline void PushErrorMsg::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.PushErrorMsg.errmsg)
}
inline void PushErrorMsg::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.PushErrorMsg.errmsg)
}
inline void PushErrorMsg::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.PushErrorMsg.errmsg)
}
inline ::std::string* PushErrorMsg::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.PushErrorMsg.errmsg)
  return errmsg_;
}
inline ::std::string* PushErrorMsg::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PushErrorMsg::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.PushErrorMsg.errmsg)
}

// -------------------------------------------------------------------

// UserChat

// required int32 senduserid = 1;
inline bool UserChat::has_senduserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserChat::set_has_senduserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserChat::clear_has_senduserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserChat::clear_senduserid() {
  senduserid_ = 0;
  clear_has_senduserid();
}
inline ::google::protobuf::int32 UserChat::senduserid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserChat.senduserid)
  return senduserid_;
}
inline void UserChat::set_senduserid(::google::protobuf::int32 value) {
  set_has_senduserid();
  senduserid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserChat.senduserid)
}

// required int32 targetuserid = 2;
inline bool UserChat::has_targetuserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserChat::set_has_targetuserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserChat::clear_has_targetuserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserChat::clear_targetuserid() {
  targetuserid_ = 0;
  clear_has_targetuserid();
}
inline ::google::protobuf::int32 UserChat::targetuserid() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserChat.targetuserid)
  return targetuserid_;
}
inline void UserChat::set_targetuserid(::google::protobuf::int32 value) {
  set_has_targetuserid();
  targetuserid_ = value;
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserChat.targetuserid)
}

// required string jsoninfo = 3 [default = ""];
inline bool UserChat::has_jsoninfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserChat::set_has_jsoninfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserChat::clear_has_jsoninfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserChat::clear_jsoninfo() {
  if (jsoninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jsoninfo_->clear();
  }
  clear_has_jsoninfo();
}
inline const ::std::string& UserChat::jsoninfo() const {
  // @@protoc_insertion_point(field_get:com.framework.gamebase.UserChat.jsoninfo)
  return *jsoninfo_;
}
inline void UserChat::set_jsoninfo(const ::std::string& value) {
  set_has_jsoninfo();
  if (jsoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jsoninfo_ = new ::std::string;
  }
  jsoninfo_->assign(value);
  // @@protoc_insertion_point(field_set:com.framework.gamebase.UserChat.jsoninfo)
}
inline void UserChat::set_jsoninfo(const char* value) {
  set_has_jsoninfo();
  if (jsoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jsoninfo_ = new ::std::string;
  }
  jsoninfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.framework.gamebase.UserChat.jsoninfo)
}
inline void UserChat::set_jsoninfo(const char* value, size_t size) {
  set_has_jsoninfo();
  if (jsoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jsoninfo_ = new ::std::string;
  }
  jsoninfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.framework.gamebase.UserChat.jsoninfo)
}
inline ::std::string* UserChat::mutable_jsoninfo() {
  set_has_jsoninfo();
  if (jsoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    jsoninfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.framework.gamebase.UserChat.jsoninfo)
  return jsoninfo_;
}
inline ::std::string* UserChat::release_jsoninfo() {
  clear_has_jsoninfo();
  if (jsoninfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = jsoninfo_;
    jsoninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserChat::set_allocated_jsoninfo(::std::string* jsoninfo) {
  if (jsoninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jsoninfo_;
  }
  if (jsoninfo) {
    set_has_jsoninfo();
    jsoninfo_ = jsoninfo;
  } else {
    clear_has_jsoninfo();
    jsoninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.framework.gamebase.UserChat.jsoninfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamebase
}  // namespace framework
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameBaseMsg_2eproto__INCLUDED
