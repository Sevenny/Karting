// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KartingMsg.proto

#ifndef PROTOBUF_KartingMsg_2eproto__INCLUDED
#define PROTOBUF_KartingMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace karting {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_KartingMsg_2eproto();
void protobuf_AssignDesc_KartingMsg_2eproto();
void protobuf_ShutdownFile_KartingMsg_2eproto();

class BettingZone;
class UserInfo;
class GameSceneResponse;
class GameReadyStartBroadcast;
class GameStartBroadcast;
class UserZhuangRequest;
class UserZhuangResponse;
class ComfirmZhuangBroadcast;
class UserBettingRequest;
class UserBettingBroadcast;
class LotteryBroadcast;
class Balance;
class ZhuangListResponse;
class GameRecordResponse;
class UserInfoResponse;
class NotifyRobotZhuang;
class NotifyRobotBetting;

// ===================================================================

class BettingZone : public ::google::protobuf::Message {
 public:
  BettingZone();
  virtual ~BettingZone();

  BettingZone(const BettingZone& from);

  inline BettingZone& operator=(const BettingZone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BettingZone& default_instance();

  void Swap(BettingZone* other);

  // implements Message ----------------------------------------------

  BettingZone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BettingZone& from);
  void MergeFrom(const BettingZone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 totalgold = 2;
  inline bool has_totalgold() const;
  inline void clear_totalgold();
  static const int kTotalgoldFieldNumber = 2;
  inline ::google::protobuf::int32 totalgold() const;
  inline void set_totalgold(::google::protobuf::int32 value);

  // required int32 gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.BettingZone)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_totalgold();
  inline void clear_has_totalgold();
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 totalgold_;
  ::google::protobuf::int32 gold_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static BettingZone* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();

  void Swap(UserInfo* other);

  // implements Message ----------------------------------------------

  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::std::string& info() const;
  inline void set_info(const ::std::string& value);
  inline void set_info(const char* value);
  inline void set_info(const char* value, size_t size);
  inline ::std::string* mutable_info();
  inline ::std::string* release_info();
  inline void set_allocated_info(::std::string* info);

  // required int32 totalwin = 3;
  inline bool has_totalwin() const;
  inline void clear_totalwin();
  static const int kTotalwinFieldNumber = 3;
  inline ::google::protobuf::int32 totalwin() const;
  inline void set_totalwin(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.UserInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_totalwin();
  inline void clear_has_totalwin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* info_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 totalwin_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameSceneResponse : public ::google::protobuf::Message {
 public:
  GameSceneResponse();
  virtual ~GameSceneResponse();

  GameSceneResponse(const GameSceneResponse& from);

  inline GameSceneResponse& operator=(const GameSceneResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameSceneResponse& default_instance();

  void Swap(GameSceneResponse* other);

  // implements Message ----------------------------------------------

  GameSceneResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameSceneResponse& from);
  void MergeFrom(const GameSceneResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 tablestatus = 2;
  inline bool has_tablestatus() const;
  inline void clear_tablestatus();
  static const int kTablestatusFieldNumber = 2;
  inline ::google::protobuf::int32 tablestatus() const;
  inline void set_tablestatus(::google::protobuf::int32 value);

  // required int32 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 userstatus = 4;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserstatusFieldNumber = 4;
  inline ::google::protobuf::int32 userstatus() const;
  inline void set_userstatus(::google::protobuf::int32 value);

  // required int32 timeout = 5;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 5;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // required int32 players = 6;
  inline bool has_players() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 6;
  inline ::google::protobuf::int32 players() const;
  inline void set_players(::google::protobuf::int32 value);

  // repeated int32 limit = 7;
  inline int limit_size() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 7;
  inline ::google::protobuf::int32 limit(int index) const;
  inline void set_limit(int index, ::google::protobuf::int32 value);
  inline void add_limit(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      limit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_limit();

  // required .com.game.karting.UserInfo dealer = 8;
  inline bool has_dealer() const;
  inline void clear_dealer();
  static const int kDealerFieldNumber = 8;
  inline const ::com::game::karting::UserInfo& dealer() const;
  inline ::com::game::karting::UserInfo* mutable_dealer();
  inline ::com::game::karting::UserInfo* release_dealer();
  inline void set_allocated_dealer(::com::game::karting::UserInfo* dealer);

  // required int32 lianzhuang = 9;
  inline bool has_lianzhuang() const;
  inline void clear_lianzhuang();
  static const int kLianzhuangFieldNumber = 9;
  inline ::google::protobuf::int32 lianzhuang() const;
  inline void set_lianzhuang(::google::protobuf::int32 value);

  // required int32 index = 10;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 10;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 dealertotalwin = 11;
  inline bool has_dealertotalwin() const;
  inline void clear_dealertotalwin();
  static const int kDealertotalwinFieldNumber = 11;
  inline ::google::protobuf::int32 dealertotalwin() const;
  inline void set_dealertotalwin(::google::protobuf::int32 value);

  // repeated int32 indexlist = 12;
  inline int indexlist_size() const;
  inline void clear_indexlist();
  static const int kIndexlistFieldNumber = 12;
  inline ::google::protobuf::int32 indexlist(int index) const;
  inline void set_indexlist(int index, ::google::protobuf::int32 value);
  inline void add_indexlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indexlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indexlist();

  // repeated .com.game.karting.BettingZone bettingzone = 13;
  inline int bettingzone_size() const;
  inline void clear_bettingzone();
  static const int kBettingzoneFieldNumber = 13;
  inline const ::com::game::karting::BettingZone& bettingzone(int index) const;
  inline ::com::game::karting::BettingZone* mutable_bettingzone(int index);
  inline ::com::game::karting::BettingZone* add_bettingzone();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >&
      bettingzone() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >*
      mutable_bettingzone();

  // required int32 visiable = 14;
  inline bool has_visiable() const;
  inline void clear_visiable();
  static const int kVisiableFieldNumber = 14;
  inline ::google::protobuf::int32 visiable() const;
  inline void set_visiable(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.GameSceneResponse)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_tablestatus();
  inline void clear_has_tablestatus();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_players();
  inline void clear_has_players();
  inline void set_has_dealer();
  inline void clear_has_dealer();
  inline void set_has_lianzhuang();
  inline void clear_has_lianzhuang();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_dealertotalwin();
  inline void clear_has_dealertotalwin();
  inline void set_has_visiable();
  inline void clear_has_visiable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 tablestatus_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 userstatus_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 players_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > limit_;
  ::com::game::karting::UserInfo* dealer_;
  ::google::protobuf::int32 lianzhuang_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indexlist_;
  ::google::protobuf::int32 dealertotalwin_;
  ::google::protobuf::int32 visiable_;
  ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone > bettingzone_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static GameSceneResponse* default_instance_;
};
// -------------------------------------------------------------------

class GameReadyStartBroadcast : public ::google::protobuf::Message {
 public:
  GameReadyStartBroadcast();
  virtual ~GameReadyStartBroadcast();

  GameReadyStartBroadcast(const GameReadyStartBroadcast& from);

  inline GameReadyStartBroadcast& operator=(const GameReadyStartBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameReadyStartBroadcast& default_instance();

  void Swap(GameReadyStartBroadcast* other);

  // implements Message ----------------------------------------------

  GameReadyStartBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameReadyStartBroadcast& from);
  void MergeFrom(const GameReadyStartBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.GameReadyStartBroadcast)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 timeout_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static GameReadyStartBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class GameStartBroadcast : public ::google::protobuf::Message {
 public:
  GameStartBroadcast();
  virtual ~GameStartBroadcast();

  GameStartBroadcast(const GameStartBroadcast& from);

  inline GameStartBroadcast& operator=(const GameStartBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameStartBroadcast& default_instance();

  void Swap(GameStartBroadcast* other);

  // implements Message ----------------------------------------------

  GameStartBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameStartBroadcast& from);
  void MergeFrom(const GameStartBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // required int32 dealer = 3;
  inline bool has_dealer() const;
  inline void clear_dealer();
  static const int kDealerFieldNumber = 3;
  inline ::google::protobuf::int32 dealer() const;
  inline void set_dealer(::google::protobuf::int32 value);

  // repeated int32 limit = 4;
  inline int limit_size() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 4;
  inline ::google::protobuf::int32 limit(int index) const;
  inline void set_limit(int index, ::google::protobuf::int32 value);
  inline void add_limit(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      limit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_limit();

  // required int32 lianzhuang = 5;
  inline bool has_lianzhuang() const;
  inline void clear_lianzhuang();
  static const int kLianzhuangFieldNumber = 5;
  inline ::google::protobuf::int32 lianzhuang() const;
  inline void set_lianzhuang(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.GameStartBroadcast)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_dealer();
  inline void clear_has_dealer();
  inline void set_has_lianzhuang();
  inline void clear_has_lianzhuang();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > limit_;
  ::google::protobuf::int32 dealer_;
  ::google::protobuf::int32 lianzhuang_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static GameStartBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class UserZhuangRequest : public ::google::protobuf::Message {
 public:
  UserZhuangRequest();
  virtual ~UserZhuangRequest();

  UserZhuangRequest(const UserZhuangRequest& from);

  inline UserZhuangRequest& operator=(const UserZhuangRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserZhuangRequest& default_instance();

  void Swap(UserZhuangRequest* other);

  // implements Message ----------------------------------------------

  UserZhuangRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserZhuangRequest& from);
  void MergeFrom(const UserZhuangRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.UserZhuangRequest)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static UserZhuangRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserZhuangResponse : public ::google::protobuf::Message {
 public:
  UserZhuangResponse();
  virtual ~UserZhuangResponse();

  UserZhuangResponse(const UserZhuangResponse& from);

  inline UserZhuangResponse& operator=(const UserZhuangResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserZhuangResponse& default_instance();

  void Swap(UserZhuangResponse* other);

  // implements Message ----------------------------------------------

  UserZhuangResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserZhuangResponse& from);
  void MergeFrom(const UserZhuangResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required string msg = 5;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 5;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // repeated .com.game.karting.UserInfo zhuanglist = 6;
  inline int zhuanglist_size() const;
  inline void clear_zhuanglist();
  static const int kZhuanglistFieldNumber = 6;
  inline const ::com::game::karting::UserInfo& zhuanglist(int index) const;
  inline ::com::game::karting::UserInfo* mutable_zhuanglist(int index);
  inline ::com::game::karting::UserInfo* add_zhuanglist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >&
      zhuanglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >*
      mutable_zhuanglist();

  // @@protoc_insertion_point(class_scope:com.game.karting.UserZhuangResponse)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 type_;
  ::std::string* msg_;
  ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo > zhuanglist_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static UserZhuangResponse* default_instance_;
};
// -------------------------------------------------------------------

class ComfirmZhuangBroadcast : public ::google::protobuf::Message {
 public:
  ComfirmZhuangBroadcast();
  virtual ~ComfirmZhuangBroadcast();

  ComfirmZhuangBroadcast(const ComfirmZhuangBroadcast& from);

  inline ComfirmZhuangBroadcast& operator=(const ComfirmZhuangBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComfirmZhuangBroadcast& default_instance();

  void Swap(ComfirmZhuangBroadcast* other);

  // implements Message ----------------------------------------------

  ComfirmZhuangBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComfirmZhuangBroadcast& from);
  void MergeFrom(const ComfirmZhuangBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required .com.game.karting.UserInfo dealer = 2;
  inline bool has_dealer() const;
  inline void clear_dealer();
  static const int kDealerFieldNumber = 2;
  inline const ::com::game::karting::UserInfo& dealer() const;
  inline ::com::game::karting::UserInfo* mutable_dealer();
  inline ::com::game::karting::UserInfo* release_dealer();
  inline void set_allocated_dealer(::com::game::karting::UserInfo* dealer);

  // @@protoc_insertion_point(class_scope:com.game.karting.ComfirmZhuangBroadcast)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_dealer();
  inline void clear_has_dealer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::game::karting::UserInfo* dealer_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static ComfirmZhuangBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class UserBettingRequest : public ::google::protobuf::Message {
 public:
  UserBettingRequest();
  virtual ~UserBettingRequest();

  UserBettingRequest(const UserBettingRequest& from);

  inline UserBettingRequest& operator=(const UserBettingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBettingRequest& default_instance();

  void Swap(UserBettingRequest* other);

  // implements Message ----------------------------------------------

  UserBettingRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBettingRequest& from);
  void MergeFrom(const UserBettingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 jetton = 1;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 1;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.UserBettingRequest)
 private:
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 jetton_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static UserBettingRequest* default_instance_;
};
// -------------------------------------------------------------------

class UserBettingBroadcast : public ::google::protobuf::Message {
 public:
  UserBettingBroadcast();
  virtual ~UserBettingBroadcast();

  UserBettingBroadcast(const UserBettingBroadcast& from);

  inline UserBettingBroadcast& operator=(const UserBettingBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserBettingBroadcast& default_instance();

  void Swap(UserBettingBroadcast* other);

  // implements Message ----------------------------------------------

  UserBettingBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserBettingBroadcast& from);
  void MergeFrom(const UserBettingBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 jetton = 3;
  inline bool has_jetton() const;
  inline void clear_jetton();
  static const int kJettonFieldNumber = 3;
  inline ::google::protobuf::int32 jetton() const;
  inline void set_jetton(::google::protobuf::int32 value);

  // required int32 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 gold = 5;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 5;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // repeated int32 limit = 6;
  inline int limit_size() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 6;
  inline ::google::protobuf::int32 limit(int index) const;
  inline void set_limit(int index, ::google::protobuf::int32 value);
  inline void add_limit(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      limit() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_limit();

  // required int32 result = 7;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 7;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string msg = 8;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 8;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // repeated .com.game.karting.BettingZone data = 9;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 9;
  inline const ::com::game::karting::BettingZone& data(int index) const;
  inline ::com::game::karting::BettingZone* mutable_data(int index);
  inline ::com::game::karting::BettingZone* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >*
      mutable_data();

  // required int32 visiable = 10;
  inline bool has_visiable() const;
  inline void clear_visiable();
  static const int kVisiableFieldNumber = 10;
  inline ::google::protobuf::int32 visiable() const;
  inline void set_visiable(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.UserBettingBroadcast)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_jetton();
  inline void clear_has_jetton();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_visiable();
  inline void clear_has_visiable();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 jetton_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > limit_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 result_;
  ::std::string* msg_;
  ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone > data_;
  ::google::protobuf::int32 visiable_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static UserBettingBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class LotteryBroadcast : public ::google::protobuf::Message {
 public:
  LotteryBroadcast();
  virtual ~LotteryBroadcast();

  LotteryBroadcast(const LotteryBroadcast& from);

  inline LotteryBroadcast& operator=(const LotteryBroadcast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryBroadcast& default_instance();

  void Swap(LotteryBroadcast* other);

  // implements Message ----------------------------------------------

  LotteryBroadcast* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryBroadcast& from);
  void MergeFrom(const LotteryBroadcast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // required int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 start = 4;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::int32 start() const;
  inline void set_start(::google::protobuf::int32 value);

  // repeated .com.game.karting.BettingZone data = 5;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::com::game::karting::BettingZone& data(int index) const;
  inline ::com::game::karting::BettingZone* mutable_data(int index);
  inline ::com::game::karting::BettingZone* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:com.game.karting.LotteryBroadcast)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 start_;
  ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone > data_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static LotteryBroadcast* default_instance_;
};
// -------------------------------------------------------------------

class Balance : public ::google::protobuf::Message {
 public:
  Balance();
  virtual ~Balance();

  Balance(const Balance& from);

  inline Balance& operator=(const Balance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Balance& default_instance();

  void Swap(Balance* other);

  // implements Message ----------------------------------------------

  Balance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Balance& from);
  void MergeFrom(const Balance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 userjetton = 3;
  inline bool has_userjetton() const;
  inline void clear_userjetton();
  static const int kUserjettonFieldNumber = 3;
  inline ::google::protobuf::int32 userjetton() const;
  inline void set_userjetton(::google::protobuf::int32 value);

  // required int32 userwin = 4;
  inline bool has_userwin() const;
  inline void clear_userwin();
  static const int kUserwinFieldNumber = 4;
  inline ::google::protobuf::int32 userwin() const;
  inline void set_userwin(::google::protobuf::int32 value);

  // required int32 usergold = 5;
  inline bool has_usergold() const;
  inline void clear_usergold();
  static const int kUsergoldFieldNumber = 5;
  inline ::google::protobuf::int32 usergold() const;
  inline void set_usergold(::google::protobuf::int32 value);

  // required int32 totaljetton = 6;
  inline bool has_totaljetton() const;
  inline void clear_totaljetton();
  static const int kTotaljettonFieldNumber = 6;
  inline ::google::protobuf::int32 totaljetton() const;
  inline void set_totaljetton(::google::protobuf::int32 value);

  // required int32 dealerwin = 7;
  inline bool has_dealerwin() const;
  inline void clear_dealerwin();
  static const int kDealerwinFieldNumber = 7;
  inline ::google::protobuf::int32 dealerwin() const;
  inline void set_dealerwin(::google::protobuf::int32 value);

  // required int32 dealergold = 8;
  inline bool has_dealergold() const;
  inline void clear_dealergold();
  static const int kDealergoldFieldNumber = 8;
  inline ::google::protobuf::int32 dealergold() const;
  inline void set_dealergold(::google::protobuf::int32 value);

  // required int32 dealertotalwin = 9;
  inline bool has_dealertotalwin() const;
  inline void clear_dealertotalwin();
  static const int kDealertotalwinFieldNumber = 9;
  inline ::google::protobuf::int32 dealertotalwin() const;
  inline void set_dealertotalwin(::google::protobuf::int32 value);

  // required int32 index = 10;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 10;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // required int32 timeout = 11;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 11;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);

  // repeated int32 indexlist = 12;
  inline int indexlist_size() const;
  inline void clear_indexlist();
  static const int kIndexlistFieldNumber = 12;
  inline ::google::protobuf::int32 indexlist(int index) const;
  inline void set_indexlist(int index, ::google::protobuf::int32 value);
  inline void add_indexlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      indexlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_indexlist();

  // @@protoc_insertion_point(class_scope:com.game.karting.Balance)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_userjetton();
  inline void clear_has_userjetton();
  inline void set_has_userwin();
  inline void clear_has_userwin();
  inline void set_has_usergold();
  inline void clear_has_usergold();
  inline void set_has_totaljetton();
  inline void clear_has_totaljetton();
  inline void set_has_dealerwin();
  inline void clear_has_dealerwin();
  inline void set_has_dealergold();
  inline void clear_has_dealergold();
  inline void set_has_dealertotalwin();
  inline void clear_has_dealertotalwin();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_timeout();
  inline void clear_has_timeout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 userjetton_;
  ::google::protobuf::int32 userwin_;
  ::google::protobuf::int32 usergold_;
  ::google::protobuf::int32 totaljetton_;
  ::google::protobuf::int32 dealerwin_;
  ::google::protobuf::int32 dealergold_;
  ::google::protobuf::int32 dealertotalwin_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > indexlist_;
  ::google::protobuf::int32 timeout_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static Balance* default_instance_;
};
// -------------------------------------------------------------------

class ZhuangListResponse : public ::google::protobuf::Message {
 public:
  ZhuangListResponse();
  virtual ~ZhuangListResponse();

  ZhuangListResponse(const ZhuangListResponse& from);

  inline ZhuangListResponse& operator=(const ZhuangListResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZhuangListResponse& default_instance();

  void Swap(ZhuangListResponse* other);

  // implements Message ----------------------------------------------

  ZhuangListResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZhuangListResponse& from);
  void MergeFrom(const ZhuangListResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // repeated .com.game.karting.UserInfo zhuanglist = 3;
  inline int zhuanglist_size() const;
  inline void clear_zhuanglist();
  static const int kZhuanglistFieldNumber = 3;
  inline const ::com::game::karting::UserInfo& zhuanglist(int index) const;
  inline ::com::game::karting::UserInfo* mutable_zhuanglist(int index);
  inline ::com::game::karting::UserInfo* add_zhuanglist();
  inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >&
      zhuanglist() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >*
      mutable_zhuanglist();

  // @@protoc_insertion_point(class_scope:com.game.karting.ZhuangListResponse)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo > zhuanglist_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static ZhuangListResponse* default_instance_;
};
// -------------------------------------------------------------------

class GameRecordResponse : public ::google::protobuf::Message {
 public:
  GameRecordResponse();
  virtual ~GameRecordResponse();

  GameRecordResponse(const GameRecordResponse& from);

  inline GameRecordResponse& operator=(const GameRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameRecordResponse& default_instance();

  void Swap(GameRecordResponse* other);

  // implements Message ----------------------------------------------

  GameRecordResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameRecordResponse& from);
  void MergeFrom(const GameRecordResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 record = 1;
  inline int record_size() const;
  inline void clear_record();
  static const int kRecordFieldNumber = 1;
  inline ::google::protobuf::int32 record(int index) const;
  inline void set_record(int index, ::google::protobuf::int32 value);
  inline void add_record(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_record();

  // @@protoc_insertion_point(class_scope:com.game.karting.GameRecordResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > record_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static GameRecordResponse* default_instance_;
};
// -------------------------------------------------------------------

class UserInfoResponse : public ::google::protobuf::Message {
 public:
  UserInfoResponse();
  virtual ~UserInfoResponse();

  UserInfoResponse(const UserInfoResponse& from);

  inline UserInfoResponse& operator=(const UserInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfoResponse& default_instance();

  void Swap(UserInfoResponse* other);

  // implements Message ----------------------------------------------

  UserInfoResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfoResponse& from);
  void MergeFrom(const UserInfoResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required .com.game.karting.UserInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::com::game::karting::UserInfo& info() const;
  inline ::com::game::karting::UserInfo* mutable_info();
  inline ::com::game::karting::UserInfo* release_info();
  inline void set_allocated_info(::com::game::karting::UserInfo* info);

  // @@protoc_insertion_point(class_scope:com.game.karting.UserInfoResponse)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::game::karting::UserInfo* info_;
  ::google::protobuf::int32 tableid_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static UserInfoResponse* default_instance_;
};
// -------------------------------------------------------------------

class NotifyRobotZhuang : public ::google::protobuf::Message {
 public:
  NotifyRobotZhuang();
  virtual ~NotifyRobotZhuang();

  NotifyRobotZhuang(const NotifyRobotZhuang& from);

  inline NotifyRobotZhuang& operator=(const NotifyRobotZhuang& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyRobotZhuang& default_instance();

  void Swap(NotifyRobotZhuang* other);

  // implements Message ----------------------------------------------

  NotifyRobotZhuang* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyRobotZhuang& from);
  void MergeFrom(const NotifyRobotZhuang& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 userid = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 2;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.NotifyRobotZhuang)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 userid_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static NotifyRobotZhuang* default_instance_;
};
// -------------------------------------------------------------------

class NotifyRobotBetting : public ::google::protobuf::Message {
 public:
  NotifyRobotBetting();
  virtual ~NotifyRobotBetting();

  NotifyRobotBetting(const NotifyRobotBetting& from);

  inline NotifyRobotBetting& operator=(const NotifyRobotBetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyRobotBetting& default_instance();

  void Swap(NotifyRobotBetting* other);

  // implements Message ----------------------------------------------

  NotifyRobotBetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyRobotBetting& from);
  void MergeFrom(const NotifyRobotBetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tableid = 1;
  inline bool has_tableid() const;
  inline void clear_tableid();
  static const int kTableidFieldNumber = 1;
  inline ::google::protobuf::int32 tableid() const;
  inline void set_tableid(::google::protobuf::int32 value);

  // required int32 percent = 2;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 2;
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.game.karting.NotifyRobotBetting)
 private:
  inline void set_has_tableid();
  inline void clear_has_tableid();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tableid_;
  ::google::protobuf::int32 percent_;
  friend void  protobuf_AddDesc_KartingMsg_2eproto();
  friend void protobuf_AssignDesc_KartingMsg_2eproto();
  friend void protobuf_ShutdownFile_KartingMsg_2eproto();

  void InitAsDefaultInstance();
  static NotifyRobotBetting* default_instance_;
};
// ===================================================================


// ===================================================================

// BettingZone

// required int32 index = 1;
inline bool BettingZone::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BettingZone::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BettingZone::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BettingZone::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BettingZone::index() const {
  // @@protoc_insertion_point(field_get:com.game.karting.BettingZone.index)
  return index_;
}
inline void BettingZone::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.BettingZone.index)
}

// required int32 totalgold = 2;
inline bool BettingZone::has_totalgold() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BettingZone::set_has_totalgold() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BettingZone::clear_has_totalgold() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BettingZone::clear_totalgold() {
  totalgold_ = 0;
  clear_has_totalgold();
}
inline ::google::protobuf::int32 BettingZone::totalgold() const {
  // @@protoc_insertion_point(field_get:com.game.karting.BettingZone.totalgold)
  return totalgold_;
}
inline void BettingZone::set_totalgold(::google::protobuf::int32 value) {
  set_has_totalgold();
  totalgold_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.BettingZone.totalgold)
}

// required int32 gold = 3;
inline bool BettingZone::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BettingZone::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BettingZone::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BettingZone::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 BettingZone::gold() const {
  // @@protoc_insertion_point(field_get:com.game.karting.BettingZone.gold)
  return gold_;
}
inline void BettingZone::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.BettingZone.gold)
}

// -------------------------------------------------------------------

// UserInfo

// required int32 userid = 1;
inline bool UserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfo::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserInfo::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserInfo.userid)
  return userid_;
}
inline void UserInfo::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserInfo.userid)
}

// required string info = 2;
inline bool UserInfo::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfo::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfo::clear_info() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_->clear();
  }
  clear_has_info();
}
inline const ::std::string& UserInfo::info() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserInfo.info)
  return *info_;
}
inline void UserInfo::set_info(const ::std::string& value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.karting.UserInfo.info)
}
inline void UserInfo::set_info(const char* value) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.karting.UserInfo.info)
}
inline void UserInfo::set_info(const char* value, size_t size) {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  info_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.karting.UserInfo.info)
}
inline ::std::string* UserInfo::mutable_info() {
  set_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    info_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.karting.UserInfo.info)
  return info_;
}
inline ::std::string* UserInfo::release_info() {
  clear_has_info();
  if (info_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = info_;
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserInfo::set_allocated_info(::std::string* info) {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (info) {
    set_has_info();
    info_ = info;
  } else {
    clear_has_info();
    info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.karting.UserInfo.info)
}

// required int32 totalwin = 3;
inline bool UserInfo::has_totalwin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserInfo::set_has_totalwin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserInfo::clear_has_totalwin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserInfo::clear_totalwin() {
  totalwin_ = 0;
  clear_has_totalwin();
}
inline ::google::protobuf::int32 UserInfo::totalwin() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserInfo.totalwin)
  return totalwin_;
}
inline void UserInfo::set_totalwin(::google::protobuf::int32 value) {
  set_has_totalwin();
  totalwin_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserInfo.totalwin)
}

// -------------------------------------------------------------------

// GameSceneResponse

// required int32 tableid = 1;
inline bool GameSceneResponse::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameSceneResponse::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameSceneResponse::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameSceneResponse::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 GameSceneResponse::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.tableid)
  return tableid_;
}
inline void GameSceneResponse::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.tableid)
}

// required int32 tablestatus = 2;
inline bool GameSceneResponse::has_tablestatus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameSceneResponse::set_has_tablestatus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameSceneResponse::clear_has_tablestatus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameSceneResponse::clear_tablestatus() {
  tablestatus_ = 0;
  clear_has_tablestatus();
}
inline ::google::protobuf::int32 GameSceneResponse::tablestatus() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.tablestatus)
  return tablestatus_;
}
inline void GameSceneResponse::set_tablestatus(::google::protobuf::int32 value) {
  set_has_tablestatus();
  tablestatus_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.tablestatus)
}

// required int32 userid = 3;
inline bool GameSceneResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameSceneResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameSceneResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameSceneResponse::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 GameSceneResponse::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.userid)
  return userid_;
}
inline void GameSceneResponse::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.userid)
}

// required int32 userstatus = 4;
inline bool GameSceneResponse::has_userstatus() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GameSceneResponse::set_has_userstatus() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GameSceneResponse::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GameSceneResponse::clear_userstatus() {
  userstatus_ = 0;
  clear_has_userstatus();
}
inline ::google::protobuf::int32 GameSceneResponse::userstatus() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.userstatus)
  return userstatus_;
}
inline void GameSceneResponse::set_userstatus(::google::protobuf::int32 value) {
  set_has_userstatus();
  userstatus_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.userstatus)
}

// required int32 timeout = 5;
inline bool GameSceneResponse::has_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameSceneResponse::set_has_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameSceneResponse::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameSceneResponse::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 GameSceneResponse::timeout() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.timeout)
  return timeout_;
}
inline void GameSceneResponse::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.timeout)
}

// required int32 players = 6;
inline bool GameSceneResponse::has_players() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GameSceneResponse::set_has_players() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GameSceneResponse::clear_has_players() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GameSceneResponse::clear_players() {
  players_ = 0;
  clear_has_players();
}
inline ::google::protobuf::int32 GameSceneResponse::players() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.players)
  return players_;
}
inline void GameSceneResponse::set_players(::google::protobuf::int32 value) {
  set_has_players();
  players_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.players)
}

// repeated int32 limit = 7;
inline int GameSceneResponse::limit_size() const {
  return limit_.size();
}
inline void GameSceneResponse::clear_limit() {
  limit_.Clear();
}
inline ::google::protobuf::int32 GameSceneResponse::limit(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.limit)
  return limit_.Get(index);
}
inline void GameSceneResponse::set_limit(int index, ::google::protobuf::int32 value) {
  limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.limit)
}
inline void GameSceneResponse::add_limit(::google::protobuf::int32 value) {
  limit_.Add(value);
  // @@protoc_insertion_point(field_add:com.game.karting.GameSceneResponse.limit)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameSceneResponse::limit() const {
  // @@protoc_insertion_point(field_list:com.game.karting.GameSceneResponse.limit)
  return limit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameSceneResponse::mutable_limit() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.GameSceneResponse.limit)
  return &limit_;
}

// required .com.game.karting.UserInfo dealer = 8;
inline bool GameSceneResponse::has_dealer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GameSceneResponse::set_has_dealer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GameSceneResponse::clear_has_dealer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GameSceneResponse::clear_dealer() {
  if (dealer_ != NULL) dealer_->::com::game::karting::UserInfo::Clear();
  clear_has_dealer();
}
inline const ::com::game::karting::UserInfo& GameSceneResponse::dealer() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.dealer)
  return dealer_ != NULL ? *dealer_ : *default_instance_->dealer_;
}
inline ::com::game::karting::UserInfo* GameSceneResponse::mutable_dealer() {
  set_has_dealer();
  if (dealer_ == NULL) dealer_ = new ::com::game::karting::UserInfo;
  // @@protoc_insertion_point(field_mutable:com.game.karting.GameSceneResponse.dealer)
  return dealer_;
}
inline ::com::game::karting::UserInfo* GameSceneResponse::release_dealer() {
  clear_has_dealer();
  ::com::game::karting::UserInfo* temp = dealer_;
  dealer_ = NULL;
  return temp;
}
inline void GameSceneResponse::set_allocated_dealer(::com::game::karting::UserInfo* dealer) {
  delete dealer_;
  dealer_ = dealer;
  if (dealer) {
    set_has_dealer();
  } else {
    clear_has_dealer();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.karting.GameSceneResponse.dealer)
}

// required int32 lianzhuang = 9;
inline bool GameSceneResponse::has_lianzhuang() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GameSceneResponse::set_has_lianzhuang() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GameSceneResponse::clear_has_lianzhuang() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GameSceneResponse::clear_lianzhuang() {
  lianzhuang_ = 0;
  clear_has_lianzhuang();
}
inline ::google::protobuf::int32 GameSceneResponse::lianzhuang() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.lianzhuang)
  return lianzhuang_;
}
inline void GameSceneResponse::set_lianzhuang(::google::protobuf::int32 value) {
  set_has_lianzhuang();
  lianzhuang_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.lianzhuang)
}

// required int32 index = 10;
inline bool GameSceneResponse::has_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GameSceneResponse::set_has_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GameSceneResponse::clear_has_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GameSceneResponse::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GameSceneResponse::index() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.index)
  return index_;
}
inline void GameSceneResponse::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.index)
}

// required int32 dealertotalwin = 11;
inline bool GameSceneResponse::has_dealertotalwin() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GameSceneResponse::set_has_dealertotalwin() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GameSceneResponse::clear_has_dealertotalwin() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GameSceneResponse::clear_dealertotalwin() {
  dealertotalwin_ = 0;
  clear_has_dealertotalwin();
}
inline ::google::protobuf::int32 GameSceneResponse::dealertotalwin() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.dealertotalwin)
  return dealertotalwin_;
}
inline void GameSceneResponse::set_dealertotalwin(::google::protobuf::int32 value) {
  set_has_dealertotalwin();
  dealertotalwin_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.dealertotalwin)
}

// repeated int32 indexlist = 12;
inline int GameSceneResponse::indexlist_size() const {
  return indexlist_.size();
}
inline void GameSceneResponse::clear_indexlist() {
  indexlist_.Clear();
}
inline ::google::protobuf::int32 GameSceneResponse::indexlist(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.indexlist)
  return indexlist_.Get(index);
}
inline void GameSceneResponse::set_indexlist(int index, ::google::protobuf::int32 value) {
  indexlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.indexlist)
}
inline void GameSceneResponse::add_indexlist(::google::protobuf::int32 value) {
  indexlist_.Add(value);
  // @@protoc_insertion_point(field_add:com.game.karting.GameSceneResponse.indexlist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameSceneResponse::indexlist() const {
  // @@protoc_insertion_point(field_list:com.game.karting.GameSceneResponse.indexlist)
  return indexlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameSceneResponse::mutable_indexlist() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.GameSceneResponse.indexlist)
  return &indexlist_;
}

// repeated .com.game.karting.BettingZone bettingzone = 13;
inline int GameSceneResponse::bettingzone_size() const {
  return bettingzone_.size();
}
inline void GameSceneResponse::clear_bettingzone() {
  bettingzone_.Clear();
}
inline const ::com::game::karting::BettingZone& GameSceneResponse::bettingzone(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.bettingzone)
  return bettingzone_.Get(index);
}
inline ::com::game::karting::BettingZone* GameSceneResponse::mutable_bettingzone(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.karting.GameSceneResponse.bettingzone)
  return bettingzone_.Mutable(index);
}
inline ::com::game::karting::BettingZone* GameSceneResponse::add_bettingzone() {
  // @@protoc_insertion_point(field_add:com.game.karting.GameSceneResponse.bettingzone)
  return bettingzone_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >&
GameSceneResponse::bettingzone() const {
  // @@protoc_insertion_point(field_list:com.game.karting.GameSceneResponse.bettingzone)
  return bettingzone_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >*
GameSceneResponse::mutable_bettingzone() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.GameSceneResponse.bettingzone)
  return &bettingzone_;
}

// required int32 visiable = 14;
inline bool GameSceneResponse::has_visiable() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GameSceneResponse::set_has_visiable() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GameSceneResponse::clear_has_visiable() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GameSceneResponse::clear_visiable() {
  visiable_ = 0;
  clear_has_visiable();
}
inline ::google::protobuf::int32 GameSceneResponse::visiable() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameSceneResponse.visiable)
  return visiable_;
}
inline void GameSceneResponse::set_visiable(::google::protobuf::int32 value) {
  set_has_visiable();
  visiable_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameSceneResponse.visiable)
}

// -------------------------------------------------------------------

// GameReadyStartBroadcast

// required int32 tableid = 1;
inline bool GameReadyStartBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameReadyStartBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameReadyStartBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameReadyStartBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 GameReadyStartBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameReadyStartBroadcast.tableid)
  return tableid_;
}
inline void GameReadyStartBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameReadyStartBroadcast.tableid)
}

// required int32 timeout = 2;
inline bool GameReadyStartBroadcast::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameReadyStartBroadcast::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameReadyStartBroadcast::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameReadyStartBroadcast::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 GameReadyStartBroadcast::timeout() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameReadyStartBroadcast.timeout)
  return timeout_;
}
inline void GameReadyStartBroadcast::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameReadyStartBroadcast.timeout)
}

// -------------------------------------------------------------------

// GameStartBroadcast

// required int32 tableid = 1;
inline bool GameStartBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameStartBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameStartBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameStartBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 GameStartBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameStartBroadcast.tableid)
  return tableid_;
}
inline void GameStartBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameStartBroadcast.tableid)
}

// required int32 timeout = 2;
inline bool GameStartBroadcast::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameStartBroadcast::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameStartBroadcast::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameStartBroadcast::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 GameStartBroadcast::timeout() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameStartBroadcast.timeout)
  return timeout_;
}
inline void GameStartBroadcast::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameStartBroadcast.timeout)
}

// required int32 dealer = 3;
inline bool GameStartBroadcast::has_dealer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameStartBroadcast::set_has_dealer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameStartBroadcast::clear_has_dealer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameStartBroadcast::clear_dealer() {
  dealer_ = 0;
  clear_has_dealer();
}
inline ::google::protobuf::int32 GameStartBroadcast::dealer() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameStartBroadcast.dealer)
  return dealer_;
}
inline void GameStartBroadcast::set_dealer(::google::protobuf::int32 value) {
  set_has_dealer();
  dealer_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameStartBroadcast.dealer)
}

// repeated int32 limit = 4;
inline int GameStartBroadcast::limit_size() const {
  return limit_.size();
}
inline void GameStartBroadcast::clear_limit() {
  limit_.Clear();
}
inline ::google::protobuf::int32 GameStartBroadcast::limit(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameStartBroadcast.limit)
  return limit_.Get(index);
}
inline void GameStartBroadcast::set_limit(int index, ::google::protobuf::int32 value) {
  limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.game.karting.GameStartBroadcast.limit)
}
inline void GameStartBroadcast::add_limit(::google::protobuf::int32 value) {
  limit_.Add(value);
  // @@protoc_insertion_point(field_add:com.game.karting.GameStartBroadcast.limit)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameStartBroadcast::limit() const {
  // @@protoc_insertion_point(field_list:com.game.karting.GameStartBroadcast.limit)
  return limit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameStartBroadcast::mutable_limit() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.GameStartBroadcast.limit)
  return &limit_;
}

// required int32 lianzhuang = 5;
inline bool GameStartBroadcast::has_lianzhuang() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GameStartBroadcast::set_has_lianzhuang() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GameStartBroadcast::clear_has_lianzhuang() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GameStartBroadcast::clear_lianzhuang() {
  lianzhuang_ = 0;
  clear_has_lianzhuang();
}
inline ::google::protobuf::int32 GameStartBroadcast::lianzhuang() const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameStartBroadcast.lianzhuang)
  return lianzhuang_;
}
inline void GameStartBroadcast::set_lianzhuang(::google::protobuf::int32 value) {
  set_has_lianzhuang();
  lianzhuang_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.GameStartBroadcast.lianzhuang)
}

// -------------------------------------------------------------------

// UserZhuangRequest

// required int32 type = 1;
inline bool UserZhuangRequest::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserZhuangRequest::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserZhuangRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserZhuangRequest::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserZhuangRequest::type() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangRequest.type)
  return type_;
}
inline void UserZhuangRequest::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserZhuangRequest.type)
}

// -------------------------------------------------------------------

// UserZhuangResponse

// required int32 tableid = 1;
inline bool UserZhuangResponse::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserZhuangResponse::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserZhuangResponse::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserZhuangResponse::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 UserZhuangResponse::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangResponse.tableid)
  return tableid_;
}
inline void UserZhuangResponse::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserZhuangResponse.tableid)
}

// required int32 userid = 2;
inline bool UserZhuangResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserZhuangResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserZhuangResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserZhuangResponse::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserZhuangResponse::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangResponse.userid)
  return userid_;
}
inline void UserZhuangResponse::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserZhuangResponse.userid)
}

// required int32 result = 3;
inline bool UserZhuangResponse::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserZhuangResponse::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserZhuangResponse::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserZhuangResponse::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserZhuangResponse::result() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangResponse.result)
  return result_;
}
inline void UserZhuangResponse::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserZhuangResponse.result)
}

// required int32 type = 4;
inline bool UserZhuangResponse::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserZhuangResponse::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserZhuangResponse::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserZhuangResponse::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UserZhuangResponse::type() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangResponse.type)
  return type_;
}
inline void UserZhuangResponse::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserZhuangResponse.type)
}

// required string msg = 5;
inline bool UserZhuangResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserZhuangResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserZhuangResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserZhuangResponse::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& UserZhuangResponse::msg() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangResponse.msg)
  return *msg_;
}
inline void UserZhuangResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.karting.UserZhuangResponse.msg)
}
inline void UserZhuangResponse::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.karting.UserZhuangResponse.msg)
}
inline void UserZhuangResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.karting.UserZhuangResponse.msg)
}
inline ::std::string* UserZhuangResponse::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.karting.UserZhuangResponse.msg)
  return msg_;
}
inline ::std::string* UserZhuangResponse::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserZhuangResponse::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.karting.UserZhuangResponse.msg)
}

// repeated .com.game.karting.UserInfo zhuanglist = 6;
inline int UserZhuangResponse::zhuanglist_size() const {
  return zhuanglist_.size();
}
inline void UserZhuangResponse::clear_zhuanglist() {
  zhuanglist_.Clear();
}
inline const ::com::game::karting::UserInfo& UserZhuangResponse::zhuanglist(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserZhuangResponse.zhuanglist)
  return zhuanglist_.Get(index);
}
inline ::com::game::karting::UserInfo* UserZhuangResponse::mutable_zhuanglist(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.karting.UserZhuangResponse.zhuanglist)
  return zhuanglist_.Mutable(index);
}
inline ::com::game::karting::UserInfo* UserZhuangResponse::add_zhuanglist() {
  // @@protoc_insertion_point(field_add:com.game.karting.UserZhuangResponse.zhuanglist)
  return zhuanglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >&
UserZhuangResponse::zhuanglist() const {
  // @@protoc_insertion_point(field_list:com.game.karting.UserZhuangResponse.zhuanglist)
  return zhuanglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >*
UserZhuangResponse::mutable_zhuanglist() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.UserZhuangResponse.zhuanglist)
  return &zhuanglist_;
}

// -------------------------------------------------------------------

// ComfirmZhuangBroadcast

// required int32 tableid = 1;
inline bool ComfirmZhuangBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComfirmZhuangBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComfirmZhuangBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComfirmZhuangBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ComfirmZhuangBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.ComfirmZhuangBroadcast.tableid)
  return tableid_;
}
inline void ComfirmZhuangBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.ComfirmZhuangBroadcast.tableid)
}

// required .com.game.karting.UserInfo dealer = 2;
inline bool ComfirmZhuangBroadcast::has_dealer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComfirmZhuangBroadcast::set_has_dealer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComfirmZhuangBroadcast::clear_has_dealer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComfirmZhuangBroadcast::clear_dealer() {
  if (dealer_ != NULL) dealer_->::com::game::karting::UserInfo::Clear();
  clear_has_dealer();
}
inline const ::com::game::karting::UserInfo& ComfirmZhuangBroadcast::dealer() const {
  // @@protoc_insertion_point(field_get:com.game.karting.ComfirmZhuangBroadcast.dealer)
  return dealer_ != NULL ? *dealer_ : *default_instance_->dealer_;
}
inline ::com::game::karting::UserInfo* ComfirmZhuangBroadcast::mutable_dealer() {
  set_has_dealer();
  if (dealer_ == NULL) dealer_ = new ::com::game::karting::UserInfo;
  // @@protoc_insertion_point(field_mutable:com.game.karting.ComfirmZhuangBroadcast.dealer)
  return dealer_;
}
inline ::com::game::karting::UserInfo* ComfirmZhuangBroadcast::release_dealer() {
  clear_has_dealer();
  ::com::game::karting::UserInfo* temp = dealer_;
  dealer_ = NULL;
  return temp;
}
inline void ComfirmZhuangBroadcast::set_allocated_dealer(::com::game::karting::UserInfo* dealer) {
  delete dealer_;
  dealer_ = dealer;
  if (dealer) {
    set_has_dealer();
  } else {
    clear_has_dealer();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.karting.ComfirmZhuangBroadcast.dealer)
}

// -------------------------------------------------------------------

// UserBettingRequest

// required int32 jetton = 1;
inline bool UserBettingRequest::has_jetton() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBettingRequest::set_has_jetton() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBettingRequest::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBettingRequest::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 UserBettingRequest::jetton() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingRequest.jetton)
  return jetton_;
}
inline void UserBettingRequest::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingRequest.jetton)
}

// required int32 index = 2;
inline bool UserBettingRequest::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBettingRequest::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBettingRequest::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBettingRequest::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 UserBettingRequest::index() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingRequest.index)
  return index_;
}
inline void UserBettingRequest::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingRequest.index)
}

// -------------------------------------------------------------------

// UserBettingBroadcast

// required int32 tableid = 1;
inline bool UserBettingBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserBettingBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserBettingBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserBettingBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 UserBettingBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.tableid)
  return tableid_;
}
inline void UserBettingBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.tableid)
}

// required int32 userid = 2;
inline bool UserBettingBroadcast::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserBettingBroadcast::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserBettingBroadcast::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserBettingBroadcast::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 UserBettingBroadcast::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.userid)
  return userid_;
}
inline void UserBettingBroadcast::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.userid)
}

// required int32 jetton = 3;
inline bool UserBettingBroadcast::has_jetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserBettingBroadcast::set_has_jetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserBettingBroadcast::clear_has_jetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserBettingBroadcast::clear_jetton() {
  jetton_ = 0;
  clear_has_jetton();
}
inline ::google::protobuf::int32 UserBettingBroadcast::jetton() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.jetton)
  return jetton_;
}
inline void UserBettingBroadcast::set_jetton(::google::protobuf::int32 value) {
  set_has_jetton();
  jetton_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.jetton)
}

// required int32 index = 4;
inline bool UserBettingBroadcast::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserBettingBroadcast::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserBettingBroadcast::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserBettingBroadcast::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 UserBettingBroadcast::index() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.index)
  return index_;
}
inline void UserBettingBroadcast::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.index)
}

// required int32 gold = 5;
inline bool UserBettingBroadcast::has_gold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserBettingBroadcast::set_has_gold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserBettingBroadcast::clear_has_gold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserBettingBroadcast::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 UserBettingBroadcast::gold() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.gold)
  return gold_;
}
inline void UserBettingBroadcast::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.gold)
}

// repeated int32 limit = 6;
inline int UserBettingBroadcast::limit_size() const {
  return limit_.size();
}
inline void UserBettingBroadcast::clear_limit() {
  limit_.Clear();
}
inline ::google::protobuf::int32 UserBettingBroadcast::limit(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.limit)
  return limit_.Get(index);
}
inline void UserBettingBroadcast::set_limit(int index, ::google::protobuf::int32 value) {
  limit_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.limit)
}
inline void UserBettingBroadcast::add_limit(::google::protobuf::int32 value) {
  limit_.Add(value);
  // @@protoc_insertion_point(field_add:com.game.karting.UserBettingBroadcast.limit)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UserBettingBroadcast::limit() const {
  // @@protoc_insertion_point(field_list:com.game.karting.UserBettingBroadcast.limit)
  return limit_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UserBettingBroadcast::mutable_limit() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.UserBettingBroadcast.limit)
  return &limit_;
}

// required int32 result = 7;
inline bool UserBettingBroadcast::has_result() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserBettingBroadcast::set_has_result() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserBettingBroadcast::clear_has_result() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserBettingBroadcast::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 UserBettingBroadcast::result() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.result)
  return result_;
}
inline void UserBettingBroadcast::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.result)
}

// required string msg = 8;
inline bool UserBettingBroadcast::has_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserBettingBroadcast::set_has_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserBettingBroadcast::clear_has_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserBettingBroadcast::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& UserBettingBroadcast::msg() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.msg)
  return *msg_;
}
inline void UserBettingBroadcast::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.msg)
}
inline void UserBettingBroadcast::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.game.karting.UserBettingBroadcast.msg)
}
inline void UserBettingBroadcast::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.game.karting.UserBettingBroadcast.msg)
}
inline ::std::string* UserBettingBroadcast::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.game.karting.UserBettingBroadcast.msg)
  return msg_;
}
inline ::std::string* UserBettingBroadcast::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UserBettingBroadcast::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.karting.UserBettingBroadcast.msg)
}

// repeated .com.game.karting.BettingZone data = 9;
inline int UserBettingBroadcast::data_size() const {
  return data_.size();
}
inline void UserBettingBroadcast::clear_data() {
  data_.Clear();
}
inline const ::com::game::karting::BettingZone& UserBettingBroadcast::data(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.data)
  return data_.Get(index);
}
inline ::com::game::karting::BettingZone* UserBettingBroadcast::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.karting.UserBettingBroadcast.data)
  return data_.Mutable(index);
}
inline ::com::game::karting::BettingZone* UserBettingBroadcast::add_data() {
  // @@protoc_insertion_point(field_add:com.game.karting.UserBettingBroadcast.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >&
UserBettingBroadcast::data() const {
  // @@protoc_insertion_point(field_list:com.game.karting.UserBettingBroadcast.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >*
UserBettingBroadcast::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.UserBettingBroadcast.data)
  return &data_;
}

// required int32 visiable = 10;
inline bool UserBettingBroadcast::has_visiable() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserBettingBroadcast::set_has_visiable() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserBettingBroadcast::clear_has_visiable() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserBettingBroadcast::clear_visiable() {
  visiable_ = 0;
  clear_has_visiable();
}
inline ::google::protobuf::int32 UserBettingBroadcast::visiable() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserBettingBroadcast.visiable)
  return visiable_;
}
inline void UserBettingBroadcast::set_visiable(::google::protobuf::int32 value) {
  set_has_visiable();
  visiable_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserBettingBroadcast.visiable)
}

// -------------------------------------------------------------------

// LotteryBroadcast

// required int32 tableid = 1;
inline bool LotteryBroadcast::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryBroadcast::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryBroadcast::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryBroadcast::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 LotteryBroadcast::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.LotteryBroadcast.tableid)
  return tableid_;
}
inline void LotteryBroadcast::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.LotteryBroadcast.tableid)
}

// required int32 timeout = 2;
inline bool LotteryBroadcast::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryBroadcast::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryBroadcast::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryBroadcast::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 LotteryBroadcast::timeout() const {
  // @@protoc_insertion_point(field_get:com.game.karting.LotteryBroadcast.timeout)
  return timeout_;
}
inline void LotteryBroadcast::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.LotteryBroadcast.timeout)
}

// required int32 index = 3;
inline bool LotteryBroadcast::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryBroadcast::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryBroadcast::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryBroadcast::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 LotteryBroadcast::index() const {
  // @@protoc_insertion_point(field_get:com.game.karting.LotteryBroadcast.index)
  return index_;
}
inline void LotteryBroadcast::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.LotteryBroadcast.index)
}

// required int32 start = 4;
inline bool LotteryBroadcast::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotteryBroadcast::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotteryBroadcast::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotteryBroadcast::clear_start() {
  start_ = 0;
  clear_has_start();
}
inline ::google::protobuf::int32 LotteryBroadcast::start() const {
  // @@protoc_insertion_point(field_get:com.game.karting.LotteryBroadcast.start)
  return start_;
}
inline void LotteryBroadcast::set_start(::google::protobuf::int32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.LotteryBroadcast.start)
}

// repeated .com.game.karting.BettingZone data = 5;
inline int LotteryBroadcast::data_size() const {
  return data_.size();
}
inline void LotteryBroadcast::clear_data() {
  data_.Clear();
}
inline const ::com::game::karting::BettingZone& LotteryBroadcast::data(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.LotteryBroadcast.data)
  return data_.Get(index);
}
inline ::com::game::karting::BettingZone* LotteryBroadcast::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.karting.LotteryBroadcast.data)
  return data_.Mutable(index);
}
inline ::com::game::karting::BettingZone* LotteryBroadcast::add_data() {
  // @@protoc_insertion_point(field_add:com.game.karting.LotteryBroadcast.data)
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >&
LotteryBroadcast::data() const {
  // @@protoc_insertion_point(field_list:com.game.karting.LotteryBroadcast.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::BettingZone >*
LotteryBroadcast::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.LotteryBroadcast.data)
  return &data_;
}

// -------------------------------------------------------------------

// Balance

// required int32 tableid = 1;
inline bool Balance::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Balance::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Balance::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Balance::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 Balance::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.tableid)
  return tableid_;
}
inline void Balance::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.tableid)
}

// required int32 userid = 2;
inline bool Balance::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Balance::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Balance::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Balance::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 Balance::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.userid)
  return userid_;
}
inline void Balance::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.userid)
}

// required int32 userjetton = 3;
inline bool Balance::has_userjetton() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Balance::set_has_userjetton() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Balance::clear_has_userjetton() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Balance::clear_userjetton() {
  userjetton_ = 0;
  clear_has_userjetton();
}
inline ::google::protobuf::int32 Balance::userjetton() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.userjetton)
  return userjetton_;
}
inline void Balance::set_userjetton(::google::protobuf::int32 value) {
  set_has_userjetton();
  userjetton_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.userjetton)
}

// required int32 userwin = 4;
inline bool Balance::has_userwin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Balance::set_has_userwin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Balance::clear_has_userwin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Balance::clear_userwin() {
  userwin_ = 0;
  clear_has_userwin();
}
inline ::google::protobuf::int32 Balance::userwin() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.userwin)
  return userwin_;
}
inline void Balance::set_userwin(::google::protobuf::int32 value) {
  set_has_userwin();
  userwin_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.userwin)
}

// required int32 usergold = 5;
inline bool Balance::has_usergold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Balance::set_has_usergold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Balance::clear_has_usergold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Balance::clear_usergold() {
  usergold_ = 0;
  clear_has_usergold();
}
inline ::google::protobuf::int32 Balance::usergold() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.usergold)
  return usergold_;
}
inline void Balance::set_usergold(::google::protobuf::int32 value) {
  set_has_usergold();
  usergold_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.usergold)
}

// required int32 totaljetton = 6;
inline bool Balance::has_totaljetton() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Balance::set_has_totaljetton() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Balance::clear_has_totaljetton() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Balance::clear_totaljetton() {
  totaljetton_ = 0;
  clear_has_totaljetton();
}
inline ::google::protobuf::int32 Balance::totaljetton() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.totaljetton)
  return totaljetton_;
}
inline void Balance::set_totaljetton(::google::protobuf::int32 value) {
  set_has_totaljetton();
  totaljetton_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.totaljetton)
}

// required int32 dealerwin = 7;
inline bool Balance::has_dealerwin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Balance::set_has_dealerwin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Balance::clear_has_dealerwin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Balance::clear_dealerwin() {
  dealerwin_ = 0;
  clear_has_dealerwin();
}
inline ::google::protobuf::int32 Balance::dealerwin() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.dealerwin)
  return dealerwin_;
}
inline void Balance::set_dealerwin(::google::protobuf::int32 value) {
  set_has_dealerwin();
  dealerwin_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.dealerwin)
}

// required int32 dealergold = 8;
inline bool Balance::has_dealergold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Balance::set_has_dealergold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Balance::clear_has_dealergold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Balance::clear_dealergold() {
  dealergold_ = 0;
  clear_has_dealergold();
}
inline ::google::protobuf::int32 Balance::dealergold() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.dealergold)
  return dealergold_;
}
inline void Balance::set_dealergold(::google::protobuf::int32 value) {
  set_has_dealergold();
  dealergold_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.dealergold)
}

// required int32 dealertotalwin = 9;
inline bool Balance::has_dealertotalwin() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Balance::set_has_dealertotalwin() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Balance::clear_has_dealertotalwin() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Balance::clear_dealertotalwin() {
  dealertotalwin_ = 0;
  clear_has_dealertotalwin();
}
inline ::google::protobuf::int32 Balance::dealertotalwin() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.dealertotalwin)
  return dealertotalwin_;
}
inline void Balance::set_dealertotalwin(::google::protobuf::int32 value) {
  set_has_dealertotalwin();
  dealertotalwin_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.dealertotalwin)
}

// required int32 index = 10;
inline bool Balance::has_index() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Balance::set_has_index() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Balance::clear_has_index() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Balance::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Balance::index() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.index)
  return index_;
}
inline void Balance::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.index)
}

// required int32 timeout = 11;
inline bool Balance::has_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Balance::set_has_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Balance::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Balance::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 Balance::timeout() const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.timeout)
  return timeout_;
}
inline void Balance::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.timeout)
}

// repeated int32 indexlist = 12;
inline int Balance::indexlist_size() const {
  return indexlist_.size();
}
inline void Balance::clear_indexlist() {
  indexlist_.Clear();
}
inline ::google::protobuf::int32 Balance::indexlist(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.Balance.indexlist)
  return indexlist_.Get(index);
}
inline void Balance::set_indexlist(int index, ::google::protobuf::int32 value) {
  indexlist_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.game.karting.Balance.indexlist)
}
inline void Balance::add_indexlist(::google::protobuf::int32 value) {
  indexlist_.Add(value);
  // @@protoc_insertion_point(field_add:com.game.karting.Balance.indexlist)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Balance::indexlist() const {
  // @@protoc_insertion_point(field_list:com.game.karting.Balance.indexlist)
  return indexlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Balance::mutable_indexlist() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.Balance.indexlist)
  return &indexlist_;
}

// -------------------------------------------------------------------

// ZhuangListResponse

// required int32 tableid = 1;
inline bool ZhuangListResponse::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZhuangListResponse::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZhuangListResponse::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZhuangListResponse::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 ZhuangListResponse::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.ZhuangListResponse.tableid)
  return tableid_;
}
inline void ZhuangListResponse::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.ZhuangListResponse.tableid)
}

// required int32 userid = 2;
inline bool ZhuangListResponse::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZhuangListResponse::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZhuangListResponse::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZhuangListResponse::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 ZhuangListResponse::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.ZhuangListResponse.userid)
  return userid_;
}
inline void ZhuangListResponse::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.ZhuangListResponse.userid)
}

// repeated .com.game.karting.UserInfo zhuanglist = 3;
inline int ZhuangListResponse::zhuanglist_size() const {
  return zhuanglist_.size();
}
inline void ZhuangListResponse::clear_zhuanglist() {
  zhuanglist_.Clear();
}
inline const ::com::game::karting::UserInfo& ZhuangListResponse::zhuanglist(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.ZhuangListResponse.zhuanglist)
  return zhuanglist_.Get(index);
}
inline ::com::game::karting::UserInfo* ZhuangListResponse::mutable_zhuanglist(int index) {
  // @@protoc_insertion_point(field_mutable:com.game.karting.ZhuangListResponse.zhuanglist)
  return zhuanglist_.Mutable(index);
}
inline ::com::game::karting::UserInfo* ZhuangListResponse::add_zhuanglist() {
  // @@protoc_insertion_point(field_add:com.game.karting.ZhuangListResponse.zhuanglist)
  return zhuanglist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >&
ZhuangListResponse::zhuanglist() const {
  // @@protoc_insertion_point(field_list:com.game.karting.ZhuangListResponse.zhuanglist)
  return zhuanglist_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::game::karting::UserInfo >*
ZhuangListResponse::mutable_zhuanglist() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.ZhuangListResponse.zhuanglist)
  return &zhuanglist_;
}

// -------------------------------------------------------------------

// GameRecordResponse

// repeated int32 record = 1;
inline int GameRecordResponse::record_size() const {
  return record_.size();
}
inline void GameRecordResponse::clear_record() {
  record_.Clear();
}
inline ::google::protobuf::int32 GameRecordResponse::record(int index) const {
  // @@protoc_insertion_point(field_get:com.game.karting.GameRecordResponse.record)
  return record_.Get(index);
}
inline void GameRecordResponse::set_record(int index, ::google::protobuf::int32 value) {
  record_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.game.karting.GameRecordResponse.record)
}
inline void GameRecordResponse::add_record(::google::protobuf::int32 value) {
  record_.Add(value);
  // @@protoc_insertion_point(field_add:com.game.karting.GameRecordResponse.record)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameRecordResponse::record() const {
  // @@protoc_insertion_point(field_list:com.game.karting.GameRecordResponse.record)
  return record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameRecordResponse::mutable_record() {
  // @@protoc_insertion_point(field_mutable_list:com.game.karting.GameRecordResponse.record)
  return &record_;
}

// -------------------------------------------------------------------

// UserInfoResponse

// required int32 tableid = 1;
inline bool UserInfoResponse::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserInfoResponse::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserInfoResponse::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserInfoResponse::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 UserInfoResponse::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserInfoResponse.tableid)
  return tableid_;
}
inline void UserInfoResponse::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.UserInfoResponse.tableid)
}

// required .com.game.karting.UserInfo info = 2;
inline bool UserInfoResponse::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserInfoResponse::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserInfoResponse::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserInfoResponse::clear_info() {
  if (info_ != NULL) info_->::com::game::karting::UserInfo::Clear();
  clear_has_info();
}
inline const ::com::game::karting::UserInfo& UserInfoResponse::info() const {
  // @@protoc_insertion_point(field_get:com.game.karting.UserInfoResponse.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::com::game::karting::UserInfo* UserInfoResponse::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::com::game::karting::UserInfo;
  // @@protoc_insertion_point(field_mutable:com.game.karting.UserInfoResponse.info)
  return info_;
}
inline ::com::game::karting::UserInfo* UserInfoResponse::release_info() {
  clear_has_info();
  ::com::game::karting::UserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void UserInfoResponse::set_allocated_info(::com::game::karting::UserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.game.karting.UserInfoResponse.info)
}

// -------------------------------------------------------------------

// NotifyRobotZhuang

// required int32 tableid = 1;
inline bool NotifyRobotZhuang::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyRobotZhuang::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyRobotZhuang::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyRobotZhuang::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 NotifyRobotZhuang::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.NotifyRobotZhuang.tableid)
  return tableid_;
}
inline void NotifyRobotZhuang::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.NotifyRobotZhuang.tableid)
}

// required int32 userid = 2;
inline bool NotifyRobotZhuang::has_userid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyRobotZhuang::set_has_userid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyRobotZhuang::clear_has_userid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyRobotZhuang::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 NotifyRobotZhuang::userid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.NotifyRobotZhuang.userid)
  return userid_;
}
inline void NotifyRobotZhuang::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.NotifyRobotZhuang.userid)
}

// required int32 type = 3;
inline bool NotifyRobotZhuang::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyRobotZhuang::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyRobotZhuang::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyRobotZhuang::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NotifyRobotZhuang::type() const {
  // @@protoc_insertion_point(field_get:com.game.karting.NotifyRobotZhuang.type)
  return type_;
}
inline void NotifyRobotZhuang::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.NotifyRobotZhuang.type)
}

// -------------------------------------------------------------------

// NotifyRobotBetting

// required int32 tableid = 1;
inline bool NotifyRobotBetting::has_tableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyRobotBetting::set_has_tableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyRobotBetting::clear_has_tableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyRobotBetting::clear_tableid() {
  tableid_ = 0;
  clear_has_tableid();
}
inline ::google::protobuf::int32 NotifyRobotBetting::tableid() const {
  // @@protoc_insertion_point(field_get:com.game.karting.NotifyRobotBetting.tableid)
  return tableid_;
}
inline void NotifyRobotBetting::set_tableid(::google::protobuf::int32 value) {
  set_has_tableid();
  tableid_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.NotifyRobotBetting.tableid)
}

// required int32 percent = 2;
inline bool NotifyRobotBetting::has_percent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyRobotBetting::set_has_percent() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyRobotBetting::clear_has_percent() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyRobotBetting::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 NotifyRobotBetting::percent() const {
  // @@protoc_insertion_point(field_get:com.game.karting.NotifyRobotBetting.percent)
  return percent_;
}
inline void NotifyRobotBetting::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:com.game.karting.NotifyRobotBetting.percent)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace karting
}  // namespace game
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_KartingMsg_2eproto__INCLUDED
