// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameBaseMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameBaseMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace framework {
namespace gamebase {

namespace {

const ::google::protobuf::Descriptor* ErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* userdata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userdata_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameReponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameReponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGameBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGameBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeReadyBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeReadyBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSitdownRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSitdownRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSitdownBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSitdownBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSitupBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSitupBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitGameBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitGameBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStatusBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStatusBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* PushErrorMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PushErrorMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserChat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameBaseMsg_2eproto() {
  protobuf_AddDesc_GameBaseMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameBaseMsg.proto");
  GOOGLE_CHECK(file != NULL);
  ErrorMsg_descriptor_ = file->message_type(0);
  static const int ErrorMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, mcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, scmd_),
  };
  ErrorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorMsg_descriptor_,
      ErrorMsg::default_instance_,
      ErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorMsg));
  EnterGameRequst_descriptor_ = file->message_type(1);
  static const int EnterGameRequst_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRequst, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRequst, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRequst, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRequst, privateid_),
  };
  EnterGameRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameRequst_descriptor_,
      EnterGameRequst::default_instance_,
      EnterGameRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameRequst));
  userdata_descriptor_ = file->message_type(2);
  static const int userdata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, seatid_),
  };
  userdata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userdata_descriptor_,
      userdata::default_instance_,
      userdata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userdata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userdata));
  EnterGameReponse_descriptor_ = file->message_type(3);
  static const int EnterGameReponse_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, playercount_),
  };
  EnterGameReponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameReponse_descriptor_,
      EnterGameReponse::default_instance_,
      EnterGameReponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameReponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameReponse));
  EnterGameBroadcast_descriptor_ = file->message_type(4);
  static const int EnterGameBroadcast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, seatid_),
  };
  EnterGameBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGameBroadcast_descriptor_,
      EnterGameBroadcast::default_instance_,
      EnterGameBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGameBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGameBroadcast));
  BeReadyBroadcast_descriptor_ = file->message_type(5);
  static const int BeReadyBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeReadyBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeReadyBroadcast, tableid_),
  };
  BeReadyBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeReadyBroadcast_descriptor_,
      BeReadyBroadcast::default_instance_,
      BeReadyBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeReadyBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeReadyBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeReadyBroadcast));
  UserSitdownRequst_descriptor_ = file->message_type(6);
  static const int UserSitdownRequst_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownRequst, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownRequst, seatid_),
  };
  UserSitdownRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSitdownRequst_descriptor_,
      UserSitdownRequst::default_instance_,
      UserSitdownRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSitdownRequst));
  UserSitdownBroadcast_descriptor_ = file->message_type(7);
  static const int UserSitdownBroadcast_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownBroadcast, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownBroadcast, strinfo_),
  };
  UserSitdownBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSitdownBroadcast_descriptor_,
      UserSitdownBroadcast::default_instance_,
      UserSitdownBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitdownBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSitdownBroadcast));
  UserSitupBroadcast_descriptor_ = file->message_type(8);
  static const int UserSitupBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitupBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitupBroadcast, tableid_),
  };
  UserSitupBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSitupBroadcast_descriptor_,
      UserSitupBroadcast::default_instance_,
      UserSitupBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitupBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSitupBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSitupBroadcast));
  ExitGameBroadcast_descriptor_ = file->message_type(9);
  static const int ExitGameBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameBroadcast, tableid_),
  };
  ExitGameBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitGameBroadcast_descriptor_,
      ExitGameBroadcast::default_instance_,
      ExitGameBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitGameBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitGameBroadcast));
  UserStatusBroadcast_descriptor_ = file->message_type(10);
  static const int UserStatusBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusBroadcast, userstatus_),
  };
  UserStatusBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStatusBroadcast_descriptor_,
      UserStatusBroadcast::default_instance_,
      UserStatusBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStatusBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStatusBroadcast));
  PushErrorMsg_descriptor_ = file->message_type(11);
  static const int PushErrorMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushErrorMsg, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushErrorMsg, errcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushErrorMsg, errmsg_),
  };
  PushErrorMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PushErrorMsg_descriptor_,
      PushErrorMsg::default_instance_,
      PushErrorMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushErrorMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PushErrorMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PushErrorMsg));
  UserChat_descriptor_ = file->message_type(12);
  static const int UserChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChat, senduserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChat, targetuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChat, jsoninfo_),
  };
  UserChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserChat_descriptor_,
      UserChat::default_instance_,
      UserChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserChat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameBaseMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorMsg_descriptor_, &ErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameRequst_descriptor_, &EnterGameRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userdata_descriptor_, &userdata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameReponse_descriptor_, &EnterGameReponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGameBroadcast_descriptor_, &EnterGameBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeReadyBroadcast_descriptor_, &BeReadyBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSitdownRequst_descriptor_, &UserSitdownRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSitdownBroadcast_descriptor_, &UserSitdownBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSitupBroadcast_descriptor_, &UserSitupBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitGameBroadcast_descriptor_, &ExitGameBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStatusBroadcast_descriptor_, &UserStatusBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PushErrorMsg_descriptor_, &PushErrorMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserChat_descriptor_, &UserChat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameBaseMsg_2eproto() {
  delete ErrorMsg::default_instance_;
  delete ErrorMsg_reflection_;
  delete EnterGameRequst::default_instance_;
  delete EnterGameRequst_reflection_;
  delete userdata::default_instance_;
  delete userdata_reflection_;
  delete EnterGameReponse::default_instance_;
  delete EnterGameReponse_reflection_;
  delete EnterGameBroadcast::default_instance_;
  delete EnterGameBroadcast_reflection_;
  delete BeReadyBroadcast::default_instance_;
  delete BeReadyBroadcast_reflection_;
  delete UserSitdownRequst::default_instance_;
  delete UserSitdownRequst_reflection_;
  delete UserSitdownBroadcast::default_instance_;
  delete UserSitdownBroadcast_reflection_;
  delete UserSitdownBroadcast::_default_strinfo_;
  delete UserSitupBroadcast::default_instance_;
  delete UserSitupBroadcast_reflection_;
  delete ExitGameBroadcast::default_instance_;
  delete ExitGameBroadcast_reflection_;
  delete UserStatusBroadcast::default_instance_;
  delete UserStatusBroadcast_reflection_;
  delete PushErrorMsg::default_instance_;
  delete PushErrorMsg_reflection_;
  delete UserChat::default_instance_;
  delete UserChat_reflection_;
}

void protobuf_AddDesc_GameBaseMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021GameBaseMsg.proto\022\026com.framework.gameb"
    "ase\"a\n\010ErrorMsg\022\016\n\006userid\030\001 \002(\005\022\017\n\007errco"
    "de\030\002 \002(\005\022\020\n\006errmsg\030\003 \002(\t:\000\022\020\n\004mcmd\030\004 \001(\005"
    ":\002-1\022\020\n\004scmd\030\005 \001(\005:\002-1\"V\n\017EnterGameRequs"
    "t\022\014\n\004info\030\001 \002(\t\022\017\n\007tableid\030\002 \002(\005\022\016\n\006user"
    "id\030\003 \002(\005\022\024\n\tprivateid\030\004 \001(\005:\0010\"Y\n\010userda"
    "ta\022\014\n\004info\030\001 \002(\t\022\017\n\007tableid\030\002 \002(\005\022\016\n\006use"
    "rid\030\003 \002(\005\022\016\n\006status\030\004 \002(\005\022\016\n\006seatid\030\005 \002("
    "\005\"\326\001\n\020EnterGameReponse\022\016\n\006userid\030\001 \002(\005\022\014"
    "\n\004gold\030\002 \002(\005\022\r\n\005score\030\003 \002(\005\022\020\n\010viplevel\030"
    "\004 \002(\005\022\016\n\006status\030\005 \002(\005\022\016\n\006seatid\030\006 \002(\005\022\017\n"
    "\007tableid\030\007 \002(\005\022\014\n\004info\030\010 \002(\t\022/\n\005users\030\t "
    "\003(\0132 .com.framework.gamebase.userdata\022\023\n"
    "\013playercount\030\n \001(\005\"c\n\022EnterGameBroadcast"
    "\022\014\n\004info\030\001 \002(\t\022\017\n\007tableid\030\002 \002(\005\022\016\n\006useri"
    "d\030\003 \002(\005\022\016\n\006status\030\004 \002(\005\022\016\n\006seatid\030\005 \002(\005\""
    "3\n\020BeReadyBroadcast\022\016\n\006userid\030\001 \002(\005\022\017\n\007t"
    "ableid\030\002 \002(\005\"4\n\021UserSitdownRequst\022\017\n\007tab"
    "leid\030\001 \002(\005\022\016\n\006seatid\030\002 \002(\005\"\\\n\024UserSitdow"
    "nBroadcast\022\016\n\006userid\030\001 \002(\005\022\017\n\007tableid\030\002 "
    "\002(\005\022\016\n\006seatid\030\003 \002(\005\022\023\n\007strinfo\030\004 \002(\t:\002{}"
    "\"5\n\022UserSitupBroadcast\022\016\n\006userid\030\001 \002(\005\022\017"
    "\n\007tableid\030\002 \002(\005\"4\n\021ExitGameBroadcast\022\016\n\006"
    "userid\030\001 \002(\005\022\017\n\007tableid\030\002 \002(\005\"9\n\023UserSta"
    "tusBroadcast\022\016\n\006userid\030\001 \002(\005\022\022\n\nuserstat"
    "us\030\002 \002(\005\"A\n\014PushErrorMsg\022\016\n\006userid\030\001 \002(\005"
    "\022\017\n\007errcode\030\002 \002(\005\022\020\n\006errmsg\030\003 \002(\t:\000\"H\n\010U"
    "serChat\022\022\n\nsenduserid\030\001 \002(\005\022\024\n\014targetuse"
    "rid\030\002 \002(\005\022\022\n\010jsoninfo\030\003 \002(\t:\000", 1149);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameBaseMsg.proto", &protobuf_RegisterTypes);
  ErrorMsg::default_instance_ = new ErrorMsg();
  EnterGameRequst::default_instance_ = new EnterGameRequst();
  userdata::default_instance_ = new userdata();
  EnterGameReponse::default_instance_ = new EnterGameReponse();
  EnterGameBroadcast::default_instance_ = new EnterGameBroadcast();
  BeReadyBroadcast::default_instance_ = new BeReadyBroadcast();
  UserSitdownRequst::default_instance_ = new UserSitdownRequst();
  UserSitdownBroadcast::_default_strinfo_ =
      new ::std::string("{}", 2);
  UserSitdownBroadcast::default_instance_ = new UserSitdownBroadcast();
  UserSitupBroadcast::default_instance_ = new UserSitupBroadcast();
  ExitGameBroadcast::default_instance_ = new ExitGameBroadcast();
  UserStatusBroadcast::default_instance_ = new UserStatusBroadcast();
  PushErrorMsg::default_instance_ = new PushErrorMsg();
  UserChat::default_instance_ = new UserChat();
  ErrorMsg::default_instance_->InitAsDefaultInstance();
  EnterGameRequst::default_instance_->InitAsDefaultInstance();
  userdata::default_instance_->InitAsDefaultInstance();
  EnterGameReponse::default_instance_->InitAsDefaultInstance();
  EnterGameBroadcast::default_instance_->InitAsDefaultInstance();
  BeReadyBroadcast::default_instance_->InitAsDefaultInstance();
  UserSitdownRequst::default_instance_->InitAsDefaultInstance();
  UserSitdownBroadcast::default_instance_->InitAsDefaultInstance();
  UserSitupBroadcast::default_instance_->InitAsDefaultInstance();
  ExitGameBroadcast::default_instance_->InitAsDefaultInstance();
  UserStatusBroadcast::default_instance_->InitAsDefaultInstance();
  PushErrorMsg::default_instance_->InitAsDefaultInstance();
  UserChat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameBaseMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameBaseMsg_2eproto {
  StaticDescriptorInitializer_GameBaseMsg_2eproto() {
    protobuf_AddDesc_GameBaseMsg_2eproto();
  }
} static_descriptor_initializer_GameBaseMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ErrorMsg::kUseridFieldNumber;
const int ErrorMsg::kErrcodeFieldNumber;
const int ErrorMsg::kErrmsgFieldNumber;
const int ErrorMsg::kMcmdFieldNumber;
const int ErrorMsg::kScmdFieldNumber;
#endif  // !_MSC_VER

ErrorMsg::ErrorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.ErrorMsg)
}

void ErrorMsg::InitAsDefaultInstance() {
}

ErrorMsg::ErrorMsg(const ErrorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.ErrorMsg)
}

void ErrorMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mcmd_ = -1;
  scmd_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorMsg::~ErrorMsg() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.ErrorMsg)
  SharedDtor();
}

void ErrorMsg::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void ErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorMsg_descriptor_;
}

const ErrorMsg& ErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

ErrorMsg* ErrorMsg::default_instance_ = NULL;

ErrorMsg* ErrorMsg::New() const {
  return new ErrorMsg;
}

void ErrorMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ErrorMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userid_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
    mcmd_ = -1;
    scmd_ = -1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.ErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }

      // required int32 errcode = 2;
      case 2: {
        if (tag == 16) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_errmsg;
        break;
      }

      // required string errmsg = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mcmd;
        break;
      }

      // optional int32 mcmd = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_mcmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mcmd_)));
          set_has_mcmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_scmd;
        break;
      }

      // optional int32 scmd = 5 [default = -1];
      case 5: {
        if (tag == 40) {
         parse_scmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scmd_)));
          set_has_scmd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.ErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.ErrorMsg)
  return false;
#undef DO_
}

void ErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.ErrorMsg)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errmsg = 3 [default = ""];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  // optional int32 mcmd = 4 [default = -1];
  if (has_mcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mcmd(), output);
  }

  // optional int32 scmd = 5 [default = -1];
  if (has_scmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->scmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.ErrorMsg)
}

::google::protobuf::uint8* ErrorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.ErrorMsg)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errmsg = 3 [default = ""];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  // optional int32 mcmd = 4 [default = -1];
  if (has_mcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mcmd(), target);
  }

  // optional int32 scmd = 5 [default = -1];
  if (has_scmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->scmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.ErrorMsg)
  return target;
}

int ErrorMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // required string errmsg = 3 [default = ""];
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

    // optional int32 mcmd = 4 [default = -1];
    if (has_mcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mcmd());
    }

    // optional int32 scmd = 5 [default = -1];
    if (has_scmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorMsg::MergeFrom(const ErrorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
    if (from.has_mcmd()) {
      set_mcmd(from.mcmd());
    }
    if (from.has_scmd()) {
      set_scmd(from.scmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorMsg::CopyFrom(const ErrorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ErrorMsg::Swap(ErrorMsg* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(mcmd_, other->mcmd_);
    std::swap(scmd_, other->scmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorMsg_descriptor_;
  metadata.reflection = ErrorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameRequst::kInfoFieldNumber;
const int EnterGameRequst::kTableidFieldNumber;
const int EnterGameRequst::kUseridFieldNumber;
const int EnterGameRequst::kPrivateidFieldNumber;
#endif  // !_MSC_VER

EnterGameRequst::EnterGameRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.EnterGameRequst)
}

void EnterGameRequst::InitAsDefaultInstance() {
}

EnterGameRequst::EnterGameRequst(const EnterGameRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.EnterGameRequst)
}

void EnterGameRequst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  userid_ = 0;
  privateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameRequst::~EnterGameRequst() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.EnterGameRequst)
  SharedDtor();
}

void EnterGameRequst::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void EnterGameRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameRequst_descriptor_;
}

const EnterGameRequst& EnterGameRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

EnterGameRequst* EnterGameRequst::default_instance_ = NULL;

EnterGameRequst* EnterGameRequst::New() const {
  return new EnterGameRequst;
}

void EnterGameRequst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterGameRequst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(tableid_, privateid_);
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.EnterGameRequst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required int32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_privateid;
        break;
      }

      // optional int32 privateid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_privateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &privateid_)));
          set_has_privateid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.EnterGameRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.EnterGameRequst)
  return false;
#undef DO_
}

void EnterGameRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.EnterGameRequst)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // optional int32 privateid = 4 [default = 0];
  if (has_privateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->privateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.EnterGameRequst)
}

::google::protobuf::uint8* EnterGameRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.EnterGameRequst)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // optional int32 privateid = 4 [default = 0];
  if (has_privateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->privateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.EnterGameRequst)
  return target;
}

int EnterGameRequst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // optional int32 privateid = 4 [default = 0];
    if (has_privateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->privateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameRequst::MergeFrom(const EnterGameRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_privateid()) {
      set_privateid(from.privateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameRequst::CopyFrom(const EnterGameRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameRequst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnterGameRequst::Swap(EnterGameRequst* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(privateid_, other->privateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameRequst_descriptor_;
  metadata.reflection = EnterGameRequst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userdata::kInfoFieldNumber;
const int userdata::kTableidFieldNumber;
const int userdata::kUseridFieldNumber;
const int userdata::kStatusFieldNumber;
const int userdata::kSeatidFieldNumber;
#endif  // !_MSC_VER

userdata::userdata()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.userdata)
}

void userdata::InitAsDefaultInstance() {
}

userdata::userdata(const userdata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.userdata)
}

void userdata::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  userid_ = 0;
  status_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userdata::~userdata() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.userdata)
  SharedDtor();
}

void userdata::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void userdata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userdata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userdata_descriptor_;
}

const userdata& userdata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

userdata* userdata::default_instance_ = NULL;

userdata* userdata::New() const {
  return new userdata;
}

void userdata::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<userdata*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tableid_, seatid_);
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userdata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.userdata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required int32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 5;
      case 5: {
        if (tag == 40) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.userdata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.userdata)
  return false;
#undef DO_
}

void userdata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.userdata)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required int32 seatid = 5;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.userdata)
}

::google::protobuf::uint8* userdata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.userdata)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // required int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required int32 seatid = 5;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.userdata)
  return target;
}

int userdata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 seatid = 5;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userdata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userdata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userdata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userdata::MergeFrom(const userdata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userdata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userdata::CopyFrom(const userdata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userdata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void userdata::Swap(userdata* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userdata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userdata_descriptor_;
  metadata.reflection = userdata_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameReponse::kUseridFieldNumber;
const int EnterGameReponse::kGoldFieldNumber;
const int EnterGameReponse::kScoreFieldNumber;
const int EnterGameReponse::kViplevelFieldNumber;
const int EnterGameReponse::kStatusFieldNumber;
const int EnterGameReponse::kSeatidFieldNumber;
const int EnterGameReponse::kTableidFieldNumber;
const int EnterGameReponse::kInfoFieldNumber;
const int EnterGameReponse::kUsersFieldNumber;
const int EnterGameReponse::kPlayercountFieldNumber;
#endif  // !_MSC_VER

EnterGameReponse::EnterGameReponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.EnterGameReponse)
}

void EnterGameReponse::InitAsDefaultInstance() {
}

EnterGameReponse::EnterGameReponse(const EnterGameReponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.EnterGameReponse)
}

void EnterGameReponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  gold_ = 0;
  score_ = 0;
  viplevel_ = 0;
  status_ = 0;
  seatid_ = 0;
  tableid_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  playercount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameReponse::~EnterGameReponse() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.EnterGameReponse)
  SharedDtor();
}

void EnterGameReponse::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void EnterGameReponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameReponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameReponse_descriptor_;
}

const EnterGameReponse& EnterGameReponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

EnterGameReponse* EnterGameReponse::default_instance_ = NULL;

EnterGameReponse* EnterGameReponse::New() const {
  return new EnterGameReponse;
}

void EnterGameReponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterGameReponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(userid_, seatid_);
    tableid_ = 0;
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }
  playercount_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameReponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.EnterGameReponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gold;
        break;
      }

      // required int32 gold = 2;
      case 2: {
        if (tag == 16) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // required int32 score = 3;
      case 3: {
        if (tag == 24) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_viplevel;
        break;
      }

      // required int32 viplevel = 4;
      case 4: {
        if (tag == 32) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required int32 status = 5;
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 6;
      case 6: {
        if (tag == 48) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 7;
      case 7: {
        if (tag == 56) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_info;
        break;
      }

      // required string info = 8;
      case 8: {
        if (tag == 66) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_users;
        break;
      }

      // repeated .com.framework.gamebase.userdata users = 9;
      case 9: {
        if (tag == 74) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_users;
        if (input->ExpectTag(80)) goto parse_playercount;
        break;
      }

      // optional int32 playercount = 10;
      case 10: {
        if (tag == 80) {
         parse_playercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playercount_)));
          set_has_playercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.EnterGameReponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.EnterGameReponse)
  return false;
#undef DO_
}

void EnterGameReponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.EnterGameReponse)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gold(), output);
  }

  // required int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  // required int32 viplevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplevel(), output);
  }

  // required int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // required int32 seatid = 6;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seatid(), output);
  }

  // required int32 tableid = 7;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tableid(), output);
  }

  // required string info = 8;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->info(), output);
  }

  // repeated .com.framework.gamebase.userdata users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }

  // optional int32 playercount = 10;
  if (has_playercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->playercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.EnterGameReponse)
}

::google::protobuf::uint8* EnterGameReponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.EnterGameReponse)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 gold = 2;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gold(), target);
  }

  // required int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  // required int32 viplevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplevel(), target);
  }

  // required int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // required int32 seatid = 6;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seatid(), target);
  }

  // required int32 tableid = 7;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->tableid(), target);
  }

  // required string info = 8;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->info(), target);
  }

  // repeated .com.framework.gamebase.userdata users = 9;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->users(i), target);
  }

  // optional int32 playercount = 10;
  if (has_playercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->playercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.EnterGameReponse)
  return target;
}

int EnterGameReponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // required int32 viplevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // required int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 seatid = 6;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required int32 tableid = 7;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required string info = 8;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 playercount = 10;
    if (has_playercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playercount());
    }

  }
  // repeated .com.framework.gamebase.userdata users = 9;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameReponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameReponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameReponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameReponse::MergeFrom(const EnterGameReponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_playercount()) {
      set_playercount(from.playercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameReponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameReponse::CopyFrom(const EnterGameReponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameReponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->users())) return false;
  return true;
}

void EnterGameReponse::Swap(EnterGameReponse* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(gold_, other->gold_);
    std::swap(score_, other->score_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(status_, other->status_);
    std::swap(seatid_, other->seatid_);
    std::swap(tableid_, other->tableid_);
    std::swap(info_, other->info_);
    users_.Swap(&other->users_);
    std::swap(playercount_, other->playercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameReponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameReponse_descriptor_;
  metadata.reflection = EnterGameReponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGameBroadcast::kInfoFieldNumber;
const int EnterGameBroadcast::kTableidFieldNumber;
const int EnterGameBroadcast::kUseridFieldNumber;
const int EnterGameBroadcast::kStatusFieldNumber;
const int EnterGameBroadcast::kSeatidFieldNumber;
#endif  // !_MSC_VER

EnterGameBroadcast::EnterGameBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.EnterGameBroadcast)
}

void EnterGameBroadcast::InitAsDefaultInstance() {
}

EnterGameBroadcast::EnterGameBroadcast(const EnterGameBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.EnterGameBroadcast)
}

void EnterGameBroadcast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tableid_ = 0;
  userid_ = 0;
  status_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGameBroadcast::~EnterGameBroadcast() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.EnterGameBroadcast)
  SharedDtor();
}

void EnterGameBroadcast::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void EnterGameBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGameBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGameBroadcast_descriptor_;
}

const EnterGameBroadcast& EnterGameBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

EnterGameBroadcast* EnterGameBroadcast::default_instance_ = NULL;

EnterGameBroadcast* EnterGameBroadcast::New() const {
  return new EnterGameBroadcast;
}

void EnterGameBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterGameBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tableid_, seatid_);
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGameBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.EnterGameBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required int32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required int32 status = 4;
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 5;
      case 5: {
        if (tag == 40) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.EnterGameBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.EnterGameBroadcast)
  return false;
#undef DO_
}

void EnterGameBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.EnterGameBroadcast)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->info(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // required int32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // required int32 seatid = 5;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.EnterGameBroadcast)
}

::google::protobuf::uint8* EnterGameBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.EnterGameBroadcast)
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // required int32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // required int32 seatid = 5;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.EnterGameBroadcast)
  return target;
}

int EnterGameBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // required int32 seatid = 5;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGameBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGameBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGameBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGameBroadcast::MergeFrom(const EnterGameBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGameBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGameBroadcast::CopyFrom(const EnterGameBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGameBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void EnterGameBroadcast::Swap(EnterGameBroadcast* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(status_, other->status_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGameBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGameBroadcast_descriptor_;
  metadata.reflection = EnterGameBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeReadyBroadcast::kUseridFieldNumber;
const int BeReadyBroadcast::kTableidFieldNumber;
#endif  // !_MSC_VER

BeReadyBroadcast::BeReadyBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.BeReadyBroadcast)
}

void BeReadyBroadcast::InitAsDefaultInstance() {
}

BeReadyBroadcast::BeReadyBroadcast(const BeReadyBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.BeReadyBroadcast)
}

void BeReadyBroadcast::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeReadyBroadcast::~BeReadyBroadcast() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.BeReadyBroadcast)
  SharedDtor();
}

void BeReadyBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeReadyBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeReadyBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeReadyBroadcast_descriptor_;
}

const BeReadyBroadcast& BeReadyBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

BeReadyBroadcast* BeReadyBroadcast::default_instance_ = NULL;

BeReadyBroadcast* BeReadyBroadcast::New() const {
  return new BeReadyBroadcast;
}

void BeReadyBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeReadyBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, tableid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeReadyBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.BeReadyBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.BeReadyBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.BeReadyBroadcast)
  return false;
#undef DO_
}

void BeReadyBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.BeReadyBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.BeReadyBroadcast)
}

::google::protobuf::uint8* BeReadyBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.BeReadyBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.BeReadyBroadcast)
  return target;
}

int BeReadyBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeReadyBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeReadyBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeReadyBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeReadyBroadcast::MergeFrom(const BeReadyBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeReadyBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeReadyBroadcast::CopyFrom(const BeReadyBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeReadyBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BeReadyBroadcast::Swap(BeReadyBroadcast* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeReadyBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeReadyBroadcast_descriptor_;
  metadata.reflection = BeReadyBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSitdownRequst::kTableidFieldNumber;
const int UserSitdownRequst::kSeatidFieldNumber;
#endif  // !_MSC_VER

UserSitdownRequst::UserSitdownRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.UserSitdownRequst)
}

void UserSitdownRequst::InitAsDefaultInstance() {
}

UserSitdownRequst::UserSitdownRequst(const UserSitdownRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.UserSitdownRequst)
}

void UserSitdownRequst::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSitdownRequst::~UserSitdownRequst() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.UserSitdownRequst)
  SharedDtor();
}

void UserSitdownRequst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSitdownRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSitdownRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSitdownRequst_descriptor_;
}

const UserSitdownRequst& UserSitdownRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

UserSitdownRequst* UserSitdownRequst::default_instance_ = NULL;

UserSitdownRequst* UserSitdownRequst::New() const {
  return new UserSitdownRequst;
}

void UserSitdownRequst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserSitdownRequst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, seatid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSitdownRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.UserSitdownRequst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 2;
      case 2: {
        if (tag == 16) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.UserSitdownRequst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.UserSitdownRequst)
  return false;
#undef DO_
}

void UserSitdownRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.UserSitdownRequst)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.UserSitdownRequst)
}

::google::protobuf::uint8* UserSitdownRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.UserSitdownRequst)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 seatid = 2;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.UserSitdownRequst)
  return target;
}

int UserSitdownRequst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 seatid = 2;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSitdownRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSitdownRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSitdownRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSitdownRequst::MergeFrom(const UserSitdownRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSitdownRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSitdownRequst::CopyFrom(const UserSitdownRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSitdownRequst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserSitdownRequst::Swap(UserSitdownRequst* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSitdownRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSitdownRequst_descriptor_;
  metadata.reflection = UserSitdownRequst_reflection_;
  return metadata;
}


// ===================================================================

::std::string* UserSitdownBroadcast::_default_strinfo_ = NULL;
#ifndef _MSC_VER
const int UserSitdownBroadcast::kUseridFieldNumber;
const int UserSitdownBroadcast::kTableidFieldNumber;
const int UserSitdownBroadcast::kSeatidFieldNumber;
const int UserSitdownBroadcast::kStrinfoFieldNumber;
#endif  // !_MSC_VER

UserSitdownBroadcast::UserSitdownBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.UserSitdownBroadcast)
}

void UserSitdownBroadcast::InitAsDefaultInstance() {
}

UserSitdownBroadcast::UserSitdownBroadcast(const UserSitdownBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.UserSitdownBroadcast)
}

void UserSitdownBroadcast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  tableid_ = 0;
  seatid_ = 0;
  strinfo_ = const_cast< ::std::string*>(_default_strinfo_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSitdownBroadcast::~UserSitdownBroadcast() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.UserSitdownBroadcast)
  SharedDtor();
}

void UserSitdownBroadcast::SharedDtor() {
  if (strinfo_ != _default_strinfo_) {
    delete strinfo_;
  }
  if (this != default_instance_) {
  }
}

void UserSitdownBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSitdownBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSitdownBroadcast_descriptor_;
}

const UserSitdownBroadcast& UserSitdownBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

UserSitdownBroadcast* UserSitdownBroadcast::default_instance_ = NULL;

UserSitdownBroadcast* UserSitdownBroadcast::New() const {
  return new UserSitdownBroadcast;
}

void UserSitdownBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserSitdownBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userid_, tableid_);
    seatid_ = 0;
    if (has_strinfo()) {
      if (strinfo_ != _default_strinfo_) {
        strinfo_->assign(*_default_strinfo_);
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSitdownBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.UserSitdownBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // required int32 seatid = 3;
      case 3: {
        if (tag == 24) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_strinfo;
        break;
      }

      // required string strinfo = 4 [default = "{}"];
      case 4: {
        if (tag == 34) {
         parse_strinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strinfo().data(), this->strinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strinfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.UserSitdownBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.UserSitdownBroadcast)
  return false;
#undef DO_
}

void UserSitdownBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.UserSitdownBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seatid(), output);
  }

  // required string strinfo = 4 [default = "{}"];
  if (has_strinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strinfo().data(), this->strinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strinfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->strinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.UserSitdownBroadcast)
}

::google::protobuf::uint8* UserSitdownBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.UserSitdownBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  // required int32 seatid = 3;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seatid(), target);
  }

  // required string strinfo = 4 [default = "{}"];
  if (has_strinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strinfo().data(), this->strinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strinfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.UserSitdownBroadcast)
  return target;
}

int UserSitdownBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 seatid = 3;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

    // required string strinfo = 4 [default = "{}"];
    if (has_strinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSitdownBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSitdownBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSitdownBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSitdownBroadcast::MergeFrom(const UserSitdownBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_strinfo()) {
      set_strinfo(from.strinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSitdownBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSitdownBroadcast::CopyFrom(const UserSitdownBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSitdownBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserSitdownBroadcast::Swap(UserSitdownBroadcast* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(seatid_, other->seatid_);
    std::swap(strinfo_, other->strinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSitdownBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSitdownBroadcast_descriptor_;
  metadata.reflection = UserSitdownBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserSitupBroadcast::kUseridFieldNumber;
const int UserSitupBroadcast::kTableidFieldNumber;
#endif  // !_MSC_VER

UserSitupBroadcast::UserSitupBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.UserSitupBroadcast)
}

void UserSitupBroadcast::InitAsDefaultInstance() {
}

UserSitupBroadcast::UserSitupBroadcast(const UserSitupBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.UserSitupBroadcast)
}

void UserSitupBroadcast::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSitupBroadcast::~UserSitupBroadcast() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.UserSitupBroadcast)
  SharedDtor();
}

void UserSitupBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSitupBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSitupBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSitupBroadcast_descriptor_;
}

const UserSitupBroadcast& UserSitupBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

UserSitupBroadcast* UserSitupBroadcast::default_instance_ = NULL;

UserSitupBroadcast* UserSitupBroadcast::New() const {
  return new UserSitupBroadcast;
}

void UserSitupBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserSitupBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, tableid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSitupBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.UserSitupBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.UserSitupBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.UserSitupBroadcast)
  return false;
#undef DO_
}

void UserSitupBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.UserSitupBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.UserSitupBroadcast)
}

::google::protobuf::uint8* UserSitupBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.UserSitupBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.UserSitupBroadcast)
  return target;
}

int UserSitupBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSitupBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSitupBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSitupBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSitupBroadcast::MergeFrom(const UserSitupBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSitupBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSitupBroadcast::CopyFrom(const UserSitupBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSitupBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserSitupBroadcast::Swap(UserSitupBroadcast* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSitupBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSitupBroadcast_descriptor_;
  metadata.reflection = UserSitupBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitGameBroadcast::kUseridFieldNumber;
const int ExitGameBroadcast::kTableidFieldNumber;
#endif  // !_MSC_VER

ExitGameBroadcast::ExitGameBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.ExitGameBroadcast)
}

void ExitGameBroadcast::InitAsDefaultInstance() {
}

ExitGameBroadcast::ExitGameBroadcast(const ExitGameBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.ExitGameBroadcast)
}

void ExitGameBroadcast::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  tableid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitGameBroadcast::~ExitGameBroadcast() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.ExitGameBroadcast)
  SharedDtor();
}

void ExitGameBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitGameBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitGameBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitGameBroadcast_descriptor_;
}

const ExitGameBroadcast& ExitGameBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

ExitGameBroadcast* ExitGameBroadcast::default_instance_ = NULL;

ExitGameBroadcast* ExitGameBroadcast::New() const {
  return new ExitGameBroadcast;
}

void ExitGameBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitGameBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, tableid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitGameBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.ExitGameBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tableid;
        break;
      }

      // required int32 tableid = 2;
      case 2: {
        if (tag == 16) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.ExitGameBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.ExitGameBroadcast)
  return false;
#undef DO_
}

void ExitGameBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.ExitGameBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.ExitGameBroadcast)
}

::google::protobuf::uint8* ExitGameBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.ExitGameBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 tableid = 2;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.ExitGameBroadcast)
  return target;
}

int ExitGameBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 tableid = 2;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitGameBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitGameBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitGameBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitGameBroadcast::MergeFrom(const ExitGameBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitGameBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitGameBroadcast::CopyFrom(const ExitGameBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitGameBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExitGameBroadcast::Swap(ExitGameBroadcast* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(tableid_, other->tableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitGameBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitGameBroadcast_descriptor_;
  metadata.reflection = ExitGameBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStatusBroadcast::kUseridFieldNumber;
const int UserStatusBroadcast::kUserstatusFieldNumber;
#endif  // !_MSC_VER

UserStatusBroadcast::UserStatusBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.UserStatusBroadcast)
}

void UserStatusBroadcast::InitAsDefaultInstance() {
}

UserStatusBroadcast::UserStatusBroadcast(const UserStatusBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.UserStatusBroadcast)
}

void UserStatusBroadcast::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  userstatus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStatusBroadcast::~UserStatusBroadcast() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.UserStatusBroadcast)
  SharedDtor();
}

void UserStatusBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserStatusBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStatusBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStatusBroadcast_descriptor_;
}

const UserStatusBroadcast& UserStatusBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

UserStatusBroadcast* UserStatusBroadcast::default_instance_ = NULL;

UserStatusBroadcast* UserStatusBroadcast::New() const {
  return new UserStatusBroadcast;
}

void UserStatusBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserStatusBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, userstatus_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStatusBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.UserStatusBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userstatus;
        break;
      }

      // required int32 userstatus = 2;
      case 2: {
        if (tag == 16) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.UserStatusBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.UserStatusBroadcast)
  return false;
#undef DO_
}

void UserStatusBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.UserStatusBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 userstatus = 2;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.UserStatusBroadcast)
}

::google::protobuf::uint8* UserStatusBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.UserStatusBroadcast)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 userstatus = 2;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.UserStatusBroadcast)
  return target;
}

int UserStatusBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 userstatus = 2;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStatusBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStatusBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStatusBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStatusBroadcast::MergeFrom(const UserStatusBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStatusBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStatusBroadcast::CopyFrom(const UserStatusBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStatusBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserStatusBroadcast::Swap(UserStatusBroadcast* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStatusBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStatusBroadcast_descriptor_;
  metadata.reflection = UserStatusBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PushErrorMsg::kUseridFieldNumber;
const int PushErrorMsg::kErrcodeFieldNumber;
const int PushErrorMsg::kErrmsgFieldNumber;
#endif  // !_MSC_VER

PushErrorMsg::PushErrorMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.PushErrorMsg)
}

void PushErrorMsg::InitAsDefaultInstance() {
}

PushErrorMsg::PushErrorMsg(const PushErrorMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.PushErrorMsg)
}

void PushErrorMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  errcode_ = 0;
  errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PushErrorMsg::~PushErrorMsg() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.PushErrorMsg)
  SharedDtor();
}

void PushErrorMsg::SharedDtor() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void PushErrorMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushErrorMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PushErrorMsg_descriptor_;
}

const PushErrorMsg& PushErrorMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

PushErrorMsg* PushErrorMsg::default_instance_ = NULL;

PushErrorMsg* PushErrorMsg::New() const {
  return new PushErrorMsg;
}

void PushErrorMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PushErrorMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(userid_, errcode_);
    if (has_errmsg()) {
      if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errmsg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PushErrorMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.PushErrorMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }

      // required int32 errcode = 2;
      case 2: {
        if (tag == 16) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
          set_has_errcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_errmsg;
        break;
      }

      // required string errmsg = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_errmsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errmsg().data(), this->errmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.PushErrorMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.PushErrorMsg)
  return false;
#undef DO_
}

void PushErrorMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.PushErrorMsg)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required int32 errcode = 2;
  if (has_errcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // required string errmsg = 3 [default = ""];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.PushErrorMsg)
}

::google::protobuf::uint8* PushErrorMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.PushErrorMsg)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required int32 errcode = 2;
  if (has_errcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // required string errmsg = 3 [default = ""];
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errmsg().data(), this->errmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errmsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.PushErrorMsg)
  return target;
}

int PushErrorMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errcode());
    }

    // required string errmsg = 3 [default = ""];
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushErrorMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PushErrorMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PushErrorMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PushErrorMsg::MergeFrom(const PushErrorMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_errcode()) {
      set_errcode(from.errcode());
    }
    if (from.has_errmsg()) {
      set_errmsg(from.errmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PushErrorMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushErrorMsg::CopyFrom(const PushErrorMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushErrorMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void PushErrorMsg::Swap(PushErrorMsg* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(errcode_, other->errcode_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PushErrorMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PushErrorMsg_descriptor_;
  metadata.reflection = PushErrorMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserChat::kSenduseridFieldNumber;
const int UserChat::kTargetuseridFieldNumber;
const int UserChat::kJsoninfoFieldNumber;
#endif  // !_MSC_VER

UserChat::UserChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.framework.gamebase.UserChat)
}

void UserChat::InitAsDefaultInstance() {
}

UserChat::UserChat(const UserChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.framework.gamebase.UserChat)
}

void UserChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  senduserid_ = 0;
  targetuserid_ = 0;
  jsoninfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserChat::~UserChat() {
  // @@protoc_insertion_point(destructor:com.framework.gamebase.UserChat)
  SharedDtor();
}

void UserChat::SharedDtor() {
  if (jsoninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jsoninfo_;
  }
  if (this != default_instance_) {
  }
}

void UserChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserChat_descriptor_;
}

const UserChat& UserChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameBaseMsg_2eproto();
  return *default_instance_;
}

UserChat* UserChat::default_instance_ = NULL;

UserChat* UserChat::New() const {
  return new UserChat;
}

void UserChat::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserChat*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(senduserid_, targetuserid_);
    if (has_jsoninfo()) {
      if (jsoninfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jsoninfo_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.framework.gamebase.UserChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 senduserid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &senduserid_)));
          set_has_senduserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_targetuserid;
        break;
      }

      // required int32 targetuserid = 2;
      case 2: {
        if (tag == 16) {
         parse_targetuserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetuserid_)));
          set_has_targetuserid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_jsoninfo;
        break;
      }

      // required string jsoninfo = 3 [default = ""];
      case 3: {
        if (tag == 26) {
         parse_jsoninfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jsoninfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jsoninfo().data(), this->jsoninfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jsoninfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.framework.gamebase.UserChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.framework.gamebase.UserChat)
  return false;
#undef DO_
}

void UserChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.framework.gamebase.UserChat)
  // required int32 senduserid = 1;
  if (has_senduserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->senduserid(), output);
  }

  // required int32 targetuserid = 2;
  if (has_targetuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetuserid(), output);
  }

  // required string jsoninfo = 3 [default = ""];
  if (has_jsoninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsoninfo().data(), this->jsoninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsoninfo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->jsoninfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.framework.gamebase.UserChat)
}

::google::protobuf::uint8* UserChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.framework.gamebase.UserChat)
  // required int32 senduserid = 1;
  if (has_senduserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->senduserid(), target);
  }

  // required int32 targetuserid = 2;
  if (has_targetuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetuserid(), target);
  }

  // required string jsoninfo = 3 [default = ""];
  if (has_jsoninfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jsoninfo().data(), this->jsoninfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jsoninfo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->jsoninfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.framework.gamebase.UserChat)
  return target;
}

int UserChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 senduserid = 1;
    if (has_senduserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->senduserid());
    }

    // required int32 targetuserid = 2;
    if (has_targetuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetuserid());
    }

    // required string jsoninfo = 3 [default = ""];
    if (has_jsoninfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jsoninfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserChat::MergeFrom(const UserChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senduserid()) {
      set_senduserid(from.senduserid());
    }
    if (from.has_targetuserid()) {
      set_targetuserid(from.targetuserid());
    }
    if (from.has_jsoninfo()) {
      set_jsoninfo(from.jsoninfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserChat::CopyFrom(const UserChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserChat::Swap(UserChat* other) {
  if (other != this) {
    std::swap(senduserid_, other->senduserid_);
    std::swap(targetuserid_, other->targetuserid_);
    std::swap(jsoninfo_, other->jsoninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserChat_descriptor_;
  metadata.reflection = UserChat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamebase
}  // namespace framework
}  // namespace com

// @@protoc_insertion_point(global_scope)
