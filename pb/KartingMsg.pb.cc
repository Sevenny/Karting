// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: KartingMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "KartingMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace game {
namespace karting {

namespace {

const ::google::protobuf::Descriptor* BettingZone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BettingZone_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameSceneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameSceneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameReadyStartBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameReadyStartBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameStartBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameStartBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserZhuangRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserZhuangRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserZhuangResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserZhuangResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComfirmZhuangBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComfirmZhuangBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBettingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBettingRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBettingBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBettingBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* LotteryBroadcast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LotteryBroadcast_reflection_ = NULL;
const ::google::protobuf::Descriptor* Balance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Balance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZhuangListResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZhuangListResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameRecordResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameRecordResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRobotZhuang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRobotZhuang_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRobotBetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRobotBetting_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_KartingMsg_2eproto() {
  protobuf_AddDesc_KartingMsg_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "KartingMsg.proto");
  GOOGLE_CHECK(file != NULL);
  BettingZone_descriptor_ = file->message_type(0);
  static const int BettingZone_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingZone, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingZone, totalgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingZone, gold_),
  };
  BettingZone_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BettingZone_descriptor_,
      BettingZone::default_instance_,
      BettingZone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingZone, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BettingZone, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BettingZone));
  UserInfo_descriptor_ = file->message_type(1);
  static const int UserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, totalwin_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  GameSceneResponse_descriptor_ = file->message_type(2);
  static const int GameSceneResponse_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, tablestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, dealer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, lianzhuang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, dealertotalwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, indexlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, bettingzone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, visiable_),
  };
  GameSceneResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameSceneResponse_descriptor_,
      GameSceneResponse::default_instance_,
      GameSceneResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameSceneResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameSceneResponse));
  GameReadyStartBroadcast_descriptor_ = file->message_type(3);
  static const int GameReadyStartBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyStartBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyStartBroadcast, timeout_),
  };
  GameReadyStartBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameReadyStartBroadcast_descriptor_,
      GameReadyStartBroadcast::default_instance_,
      GameReadyStartBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyStartBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameReadyStartBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameReadyStartBroadcast));
  GameStartBroadcast_descriptor_ = file->message_type(4);
  static const int GameStartBroadcast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, dealer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, lianzhuang_),
  };
  GameStartBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameStartBroadcast_descriptor_,
      GameStartBroadcast::default_instance_,
      GameStartBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameStartBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameStartBroadcast));
  UserZhuangRequest_descriptor_ = file->message_type(5);
  static const int UserZhuangRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangRequest, type_),
  };
  UserZhuangRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserZhuangRequest_descriptor_,
      UserZhuangRequest::default_instance_,
      UserZhuangRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserZhuangRequest));
  UserZhuangResponse_descriptor_ = file->message_type(6);
  static const int UserZhuangResponse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, zhuanglist_),
  };
  UserZhuangResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserZhuangResponse_descriptor_,
      UserZhuangResponse::default_instance_,
      UserZhuangResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserZhuangResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserZhuangResponse));
  ComfirmZhuangBroadcast_descriptor_ = file->message_type(7);
  static const int ComfirmZhuangBroadcast_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComfirmZhuangBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComfirmZhuangBroadcast, dealer_),
  };
  ComfirmZhuangBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComfirmZhuangBroadcast_descriptor_,
      ComfirmZhuangBroadcast::default_instance_,
      ComfirmZhuangBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComfirmZhuangBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComfirmZhuangBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComfirmZhuangBroadcast));
  UserBettingRequest_descriptor_ = file->message_type(8);
  static const int UserBettingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingRequest, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingRequest, index_),
  };
  UserBettingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBettingRequest_descriptor_,
      UserBettingRequest::default_instance_,
      UserBettingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBettingRequest));
  UserBettingBroadcast_descriptor_ = file->message_type(9);
  static const int UserBettingBroadcast_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, jetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, visiable_),
  };
  UserBettingBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBettingBroadcast_descriptor_,
      UserBettingBroadcast::default_instance_,
      UserBettingBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBettingBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBettingBroadcast));
  LotteryBroadcast_descriptor_ = file->message_type(10);
  static const int LotteryBroadcast_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, data_),
  };
  LotteryBroadcast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LotteryBroadcast_descriptor_,
      LotteryBroadcast::default_instance_,
      LotteryBroadcast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LotteryBroadcast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LotteryBroadcast));
  Balance_descriptor_ = file->message_type(11);
  static const int Balance_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, userjetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, userwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, usergold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, totaljetton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, dealerwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, dealergold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, dealertotalwin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, indexlist_),
  };
  Balance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Balance_descriptor_,
      Balance::default_instance_,
      Balance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Balance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Balance));
  ZhuangListResponse_descriptor_ = file->message_type(12);
  static const int ZhuangListResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhuangListResponse, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhuangListResponse, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhuangListResponse, zhuanglist_),
  };
  ZhuangListResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZhuangListResponse_descriptor_,
      ZhuangListResponse::default_instance_,
      ZhuangListResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhuangListResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZhuangListResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZhuangListResponse));
  GameRecordResponse_descriptor_ = file->message_type(13);
  static const int GameRecordResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordResponse, record_),
  };
  GameRecordResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameRecordResponse_descriptor_,
      GameRecordResponse::default_instance_,
      GameRecordResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameRecordResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameRecordResponse));
  UserInfoResponse_descriptor_ = file->message_type(14);
  static const int UserInfoResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, info_),
  };
  UserInfoResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoResponse_descriptor_,
      UserInfoResponse::default_instance_,
      UserInfoResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoResponse));
  NotifyRobotZhuang_descriptor_ = file->message_type(15);
  static const int NotifyRobotZhuang_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotZhuang, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotZhuang, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotZhuang, type_),
  };
  NotifyRobotZhuang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRobotZhuang_descriptor_,
      NotifyRobotZhuang::default_instance_,
      NotifyRobotZhuang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotZhuang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotZhuang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRobotZhuang));
  NotifyRobotBetting_descriptor_ = file->message_type(16);
  static const int NotifyRobotBetting_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotBetting, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotBetting, percent_),
  };
  NotifyRobotBetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRobotBetting_descriptor_,
      NotifyRobotBetting::default_instance_,
      NotifyRobotBetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotBetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRobotBetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRobotBetting));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_KartingMsg_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BettingZone_descriptor_, &BettingZone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameSceneResponse_descriptor_, &GameSceneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameReadyStartBroadcast_descriptor_, &GameReadyStartBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameStartBroadcast_descriptor_, &GameStartBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserZhuangRequest_descriptor_, &UserZhuangRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserZhuangResponse_descriptor_, &UserZhuangResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComfirmZhuangBroadcast_descriptor_, &ComfirmZhuangBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBettingRequest_descriptor_, &UserBettingRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBettingBroadcast_descriptor_, &UserBettingBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LotteryBroadcast_descriptor_, &LotteryBroadcast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Balance_descriptor_, &Balance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZhuangListResponse_descriptor_, &ZhuangListResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameRecordResponse_descriptor_, &GameRecordResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoResponse_descriptor_, &UserInfoResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRobotZhuang_descriptor_, &NotifyRobotZhuang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRobotBetting_descriptor_, &NotifyRobotBetting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_KartingMsg_2eproto() {
  delete BettingZone::default_instance_;
  delete BettingZone_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete GameSceneResponse::default_instance_;
  delete GameSceneResponse_reflection_;
  delete GameReadyStartBroadcast::default_instance_;
  delete GameReadyStartBroadcast_reflection_;
  delete GameStartBroadcast::default_instance_;
  delete GameStartBroadcast_reflection_;
  delete UserZhuangRequest::default_instance_;
  delete UserZhuangRequest_reflection_;
  delete UserZhuangResponse::default_instance_;
  delete UserZhuangResponse_reflection_;
  delete ComfirmZhuangBroadcast::default_instance_;
  delete ComfirmZhuangBroadcast_reflection_;
  delete UserBettingRequest::default_instance_;
  delete UserBettingRequest_reflection_;
  delete UserBettingBroadcast::default_instance_;
  delete UserBettingBroadcast_reflection_;
  delete LotteryBroadcast::default_instance_;
  delete LotteryBroadcast_reflection_;
  delete Balance::default_instance_;
  delete Balance_reflection_;
  delete ZhuangListResponse::default_instance_;
  delete ZhuangListResponse_reflection_;
  delete GameRecordResponse::default_instance_;
  delete GameRecordResponse_reflection_;
  delete UserInfoResponse::default_instance_;
  delete UserInfoResponse_reflection_;
  delete NotifyRobotZhuang::default_instance_;
  delete NotifyRobotZhuang_reflection_;
  delete NotifyRobotBetting::default_instance_;
  delete NotifyRobotBetting_reflection_;
}

void protobuf_AddDesc_KartingMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020KartingMsg.proto\022\020com.game.karting\"=\n\013"
    "BettingZone\022\r\n\005index\030\001 \002(\005\022\021\n\ttotalgold\030"
    "\002 \002(\005\022\014\n\004gold\030\003 \002(\005\":\n\010UserInfo\022\016\n\006useri"
    "d\030\001 \002(\005\022\014\n\004info\030\002 \002(\t\022\020\n\010totalwin\030\003 \002(\005\""
    "\316\002\n\021GameSceneResponse\022\017\n\007tableid\030\001 \002(\005\022\023"
    "\n\013tablestatus\030\002 \002(\005\022\016\n\006userid\030\003 \002(\005\022\022\n\nu"
    "serstatus\030\004 \002(\005\022\017\n\007timeout\030\005 \002(\005\022\017\n\007play"
    "ers\030\006 \002(\005\022\r\n\005limit\030\007 \003(\005\022*\n\006dealer\030\010 \002(\013"
    "2\032.com.game.karting.UserInfo\022\022\n\nlianzhua"
    "ng\030\t \002(\005\022\r\n\005index\030\n \002(\005\022\026\n\016dealertotalwi"
    "n\030\013 \002(\005\022\021\n\tindexlist\030\014 \003(\005\0222\n\013bettingzon"
    "e\030\r \003(\0132\035.com.game.karting.BettingZone\022\020"
    "\n\010visiable\030\016 \002(\005\";\n\027GameReadyStartBroadc"
    "ast\022\017\n\007tableid\030\001 \002(\005\022\017\n\007timeout\030\002 \002(\005\"i\n"
    "\022GameStartBroadcast\022\017\n\007tableid\030\001 \002(\005\022\017\n\007"
    "timeout\030\002 \002(\005\022\016\n\006dealer\030\003 \002(\005\022\r\n\005limit\030\004"
    " \003(\005\022\022\n\nlianzhuang\030\005 \002(\005\"!\n\021UserZhuangRe"
    "quest\022\014\n\004type\030\001 \002(\005\"\220\001\n\022UserZhuangRespon"
    "se\022\017\n\007tableid\030\001 \002(\005\022\016\n\006userid\030\002 \002(\005\022\016\n\006r"
    "esult\030\003 \002(\005\022\014\n\004type\030\004 \002(\005\022\013\n\003msg\030\005 \002(\t\022."
    "\n\nzhuanglist\030\006 \003(\0132\032.com.game.karting.Us"
    "erInfo\"U\n\026ComfirmZhuangBroadcast\022\017\n\007tabl"
    "eid\030\001 \002(\005\022*\n\006dealer\030\002 \002(\0132\032.com.game.kar"
    "ting.UserInfo\"3\n\022UserBettingRequest\022\016\n\006j"
    "etton\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\"\317\001\n\024UserBetti"
    "ngBroadcast\022\017\n\007tableid\030\001 \002(\005\022\016\n\006userid\030\002"
    " \002(\005\022\016\n\006jetton\030\003 \002(\005\022\r\n\005index\030\004 \002(\005\022\014\n\004g"
    "old\030\005 \002(\005\022\r\n\005limit\030\006 \003(\005\022\016\n\006result\030\007 \002(\005"
    "\022\013\n\003msg\030\010 \002(\t\022+\n\004data\030\t \003(\0132\035.com.game.k"
    "arting.BettingZone\022\020\n\010visiable\030\n \002(\005\"\177\n\020"
    "LotteryBroadcast\022\017\n\007tableid\030\001 \002(\005\022\017\n\007tim"
    "eout\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\022\r\n\005start\030\004 \002(\005"
    "\022+\n\004data\030\005 \003(\0132\035.com.game.karting.Bettin"
    "gZone\"\350\001\n\007Balance\022\017\n\007tableid\030\001 \002(\005\022\016\n\006us"
    "erid\030\002 \002(\005\022\022\n\nuserjetton\030\003 \002(\005\022\017\n\007userwi"
    "n\030\004 \002(\005\022\020\n\010usergold\030\005 \002(\005\022\023\n\013totaljetton"
    "\030\006 \002(\005\022\021\n\tdealerwin\030\007 \002(\005\022\022\n\ndealergold\030"
    "\010 \002(\005\022\026\n\016dealertotalwin\030\t \002(\005\022\r\n\005index\030\n"
    " \002(\005\022\017\n\007timeout\030\013 \002(\005\022\021\n\tindexlist\030\014 \003(\005"
    "\"e\n\022ZhuangListResponse\022\017\n\007tableid\030\001 \002(\005\022"
    "\016\n\006userid\030\002 \002(\005\022.\n\nzhuanglist\030\003 \003(\0132\032.co"
    "m.game.karting.UserInfo\"$\n\022GameRecordRes"
    "ponse\022\016\n\006record\030\001 \003(\005\"M\n\020UserInfoRespons"
    "e\022\017\n\007tableid\030\001 \002(\005\022(\n\004info\030\002 \002(\0132\032.com.g"
    "ame.karting.UserInfo\"B\n\021NotifyRobotZhuan"
    "g\022\017\n\007tableid\030\001 \002(\005\022\016\n\006userid\030\002 \002(\005\022\014\n\004ty"
    "pe\030\003 \002(\005\"6\n\022NotifyRobotBetting\022\017\n\007tablei"
    "d\030\001 \002(\005\022\017\n\007percent\030\002 \002(\005", 1904);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "KartingMsg.proto", &protobuf_RegisterTypes);
  BettingZone::default_instance_ = new BettingZone();
  UserInfo::default_instance_ = new UserInfo();
  GameSceneResponse::default_instance_ = new GameSceneResponse();
  GameReadyStartBroadcast::default_instance_ = new GameReadyStartBroadcast();
  GameStartBroadcast::default_instance_ = new GameStartBroadcast();
  UserZhuangRequest::default_instance_ = new UserZhuangRequest();
  UserZhuangResponse::default_instance_ = new UserZhuangResponse();
  ComfirmZhuangBroadcast::default_instance_ = new ComfirmZhuangBroadcast();
  UserBettingRequest::default_instance_ = new UserBettingRequest();
  UserBettingBroadcast::default_instance_ = new UserBettingBroadcast();
  LotteryBroadcast::default_instance_ = new LotteryBroadcast();
  Balance::default_instance_ = new Balance();
  ZhuangListResponse::default_instance_ = new ZhuangListResponse();
  GameRecordResponse::default_instance_ = new GameRecordResponse();
  UserInfoResponse::default_instance_ = new UserInfoResponse();
  NotifyRobotZhuang::default_instance_ = new NotifyRobotZhuang();
  NotifyRobotBetting::default_instance_ = new NotifyRobotBetting();
  BettingZone::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  GameSceneResponse::default_instance_->InitAsDefaultInstance();
  GameReadyStartBroadcast::default_instance_->InitAsDefaultInstance();
  GameStartBroadcast::default_instance_->InitAsDefaultInstance();
  UserZhuangRequest::default_instance_->InitAsDefaultInstance();
  UserZhuangResponse::default_instance_->InitAsDefaultInstance();
  ComfirmZhuangBroadcast::default_instance_->InitAsDefaultInstance();
  UserBettingRequest::default_instance_->InitAsDefaultInstance();
  UserBettingBroadcast::default_instance_->InitAsDefaultInstance();
  LotteryBroadcast::default_instance_->InitAsDefaultInstance();
  Balance::default_instance_->InitAsDefaultInstance();
  ZhuangListResponse::default_instance_->InitAsDefaultInstance();
  GameRecordResponse::default_instance_->InitAsDefaultInstance();
  UserInfoResponse::default_instance_->InitAsDefaultInstance();
  NotifyRobotZhuang::default_instance_->InitAsDefaultInstance();
  NotifyRobotBetting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_KartingMsg_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_KartingMsg_2eproto {
  StaticDescriptorInitializer_KartingMsg_2eproto() {
    protobuf_AddDesc_KartingMsg_2eproto();
  }
} static_descriptor_initializer_KartingMsg_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BettingZone::kIndexFieldNumber;
const int BettingZone::kTotalgoldFieldNumber;
const int BettingZone::kGoldFieldNumber;
#endif  // !_MSC_VER

BettingZone::BettingZone()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.BettingZone)
}

void BettingZone::InitAsDefaultInstance() {
}

BettingZone::BettingZone(const BettingZone& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.BettingZone)
}

void BettingZone::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  totalgold_ = 0;
  gold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BettingZone::~BettingZone() {
  // @@protoc_insertion_point(destructor:com.game.karting.BettingZone)
  SharedDtor();
}

void BettingZone::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BettingZone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BettingZone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BettingZone_descriptor_;
}

const BettingZone& BettingZone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

BettingZone* BettingZone::default_instance_ = NULL;

BettingZone* BettingZone::New() const {
  return new BettingZone;
}

void BettingZone::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BettingZone*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, gold_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BettingZone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.BettingZone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_totalgold;
        break;
      }

      // required int32 totalgold = 2;
      case 2: {
        if (tag == 16) {
         parse_totalgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgold_)));
          set_has_totalgold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // required int32 gold = 3;
      case 3: {
        if (tag == 24) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.BettingZone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.BettingZone)
  return false;
#undef DO_
}

void BettingZone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.BettingZone)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required int32 totalgold = 2;
  if (has_totalgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalgold(), output);
  }

  // required int32 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.BettingZone)
}

::google::protobuf::uint8* BettingZone::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.BettingZone)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required int32 totalgold = 2;
  if (has_totalgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalgold(), target);
  }

  // required int32 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.BettingZone)
  return target;
}

int BettingZone::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 totalgold = 2;
    if (has_totalgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgold());
    }

    // required int32 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BettingZone::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BettingZone* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BettingZone*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BettingZone::MergeFrom(const BettingZone& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_totalgold()) {
      set_totalgold(from.totalgold());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BettingZone::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BettingZone::CopyFrom(const BettingZone& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BettingZone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BettingZone::Swap(BettingZone* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(totalgold_, other->totalgold_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BettingZone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BettingZone_descriptor_;
  metadata.reflection = BettingZone_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUseridFieldNumber;
const int UserInfo::kInfoFieldNumber;
const int UserInfo::kTotalwinFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.UserInfo)
}

void UserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userid_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totalwin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:com.game.karting.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(userid_, totalwin_);
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        info_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required string info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "info");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalwin;
        break;
      }

      // required int32 totalwin = 3;
      case 3: {
        if (tag == 24) {
         parse_totalwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalwin_)));
          set_has_totalwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.UserInfo)
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->info(), output);
  }

  // required int32 totalwin = 3;
  if (has_totalwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalwin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.UserInfo)
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "info");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->info(), target);
  }

  // required int32 totalwin = 3;
  if (has_totalwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalwin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

    // required int32 totalwin = 3;
    if (has_totalwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalwin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_info()) {
      set_info(from.info());
    }
    if (from.has_totalwin()) {
      set_totalwin(from.totalwin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(info_, other->info_);
    std::swap(totalwin_, other->totalwin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameSceneResponse::kTableidFieldNumber;
const int GameSceneResponse::kTablestatusFieldNumber;
const int GameSceneResponse::kUseridFieldNumber;
const int GameSceneResponse::kUserstatusFieldNumber;
const int GameSceneResponse::kTimeoutFieldNumber;
const int GameSceneResponse::kPlayersFieldNumber;
const int GameSceneResponse::kLimitFieldNumber;
const int GameSceneResponse::kDealerFieldNumber;
const int GameSceneResponse::kLianzhuangFieldNumber;
const int GameSceneResponse::kIndexFieldNumber;
const int GameSceneResponse::kDealertotalwinFieldNumber;
const int GameSceneResponse::kIndexlistFieldNumber;
const int GameSceneResponse::kBettingzoneFieldNumber;
const int GameSceneResponse::kVisiableFieldNumber;
#endif  // !_MSC_VER

GameSceneResponse::GameSceneResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.GameSceneResponse)
}

void GameSceneResponse::InitAsDefaultInstance() {
  dealer_ = const_cast< ::com::game::karting::UserInfo*>(&::com::game::karting::UserInfo::default_instance());
}

GameSceneResponse::GameSceneResponse(const GameSceneResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.GameSceneResponse)
}

void GameSceneResponse::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  tablestatus_ = 0;
  userid_ = 0;
  userstatus_ = 0;
  timeout_ = 0;
  players_ = 0;
  dealer_ = NULL;
  lianzhuang_ = 0;
  index_ = 0;
  dealertotalwin_ = 0;
  visiable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameSceneResponse::~GameSceneResponse() {
  // @@protoc_insertion_point(destructor:com.game.karting.GameSceneResponse)
  SharedDtor();
}

void GameSceneResponse::SharedDtor() {
  if (this != default_instance_) {
    delete dealer_;
  }
}

void GameSceneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameSceneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameSceneResponse_descriptor_;
}

const GameSceneResponse& GameSceneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

GameSceneResponse* GameSceneResponse::default_instance_ = NULL;

GameSceneResponse* GameSceneResponse::New() const {
  return new GameSceneResponse;
}

void GameSceneResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameSceneResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(tableid_, players_);
    if (has_dealer()) {
      if (dealer_ != NULL) dealer_->::com::game::karting::UserInfo::Clear();
    }
  }
  ZR_(lianzhuang_, index_);
  ZR_(dealertotalwin_, visiable_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  limit_.Clear();
  indexlist_.Clear();
  bettingzone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameSceneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.GameSceneResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tablestatus;
        break;
      }

      // required int32 tablestatus = 2;
      case 2: {
        if (tag == 16) {
         parse_tablestatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tablestatus_)));
          set_has_tablestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // required int32 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userstatus;
        break;
      }

      // required int32 userstatus = 4;
      case 4: {
        if (tag == 32) {
         parse_userstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userstatus_)));
          set_has_userstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 5;
      case 5: {
        if (tag == 40) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_players;
        break;
      }

      // required int32 players = 6;
      case 6: {
        if (tag == 48) {
         parse_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &players_)));
          set_has_players();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_limit;
        break;
      }

      // repeated int32 limit = 7;
      case 7: {
        if (tag == 56) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_limit())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_limit;
        if (input->ExpectTag(66)) goto parse_dealer;
        break;
      }

      // required .com.game.karting.UserInfo dealer = 8;
      case 8: {
        if (tag == 66) {
         parse_dealer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lianzhuang;
        break;
      }

      // required int32 lianzhuang = 9;
      case 9: {
        if (tag == 72) {
         parse_lianzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lianzhuang_)));
          set_has_lianzhuang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_index;
        break;
      }

      // required int32 index = 10;
      case 10: {
        if (tag == 80) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dealertotalwin;
        break;
      }

      // required int32 dealertotalwin = 11;
      case 11: {
        if (tag == 88) {
         parse_dealertotalwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealertotalwin_)));
          set_has_dealertotalwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_indexlist;
        break;
      }

      // repeated int32 indexlist = 12;
      case 12: {
        if (tag == 96) {
         parse_indexlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_indexlist())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indexlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_indexlist;
        if (input->ExpectTag(106)) goto parse_bettingzone;
        break;
      }

      // repeated .com.game.karting.BettingZone bettingzone = 13;
      case 13: {
        if (tag == 106) {
         parse_bettingzone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bettingzone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_bettingzone;
        if (input->ExpectTag(112)) goto parse_visiable;
        break;
      }

      // required int32 visiable = 14;
      case 14: {
        if (tag == 112) {
         parse_visiable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visiable_)));
          set_has_visiable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.GameSceneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.GameSceneResponse)
  return false;
#undef DO_
}

void GameSceneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.GameSceneResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 tablestatus = 2;
  if (has_tablestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tablestatus(), output);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userid(), output);
  }

  // required int32 userstatus = 4;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userstatus(), output);
  }

  // required int32 timeout = 5;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeout(), output);
  }

  // required int32 players = 6;
  if (has_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->players(), output);
  }

  // repeated int32 limit = 7;
  for (int i = 0; i < this->limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->limit(i), output);
  }

  // required .com.game.karting.UserInfo dealer = 8;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dealer(), output);
  }

  // required int32 lianzhuang = 9;
  if (has_lianzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lianzhuang(), output);
  }

  // required int32 index = 10;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->index(), output);
  }

  // required int32 dealertotalwin = 11;
  if (has_dealertotalwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dealertotalwin(), output);
  }

  // repeated int32 indexlist = 12;
  for (int i = 0; i < this->indexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->indexlist(i), output);
  }

  // repeated .com.game.karting.BettingZone bettingzone = 13;
  for (int i = 0; i < this->bettingzone_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->bettingzone(i), output);
  }

  // required int32 visiable = 14;
  if (has_visiable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->visiable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.GameSceneResponse)
}

::google::protobuf::uint8* GameSceneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.GameSceneResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 tablestatus = 2;
  if (has_tablestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tablestatus(), target);
  }

  // required int32 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userid(), target);
  }

  // required int32 userstatus = 4;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userstatus(), target);
  }

  // required int32 timeout = 5;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeout(), target);
  }

  // required int32 players = 6;
  if (has_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->players(), target);
  }

  // repeated int32 limit = 7;
  for (int i = 0; i < this->limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->limit(i), target);
  }

  // required .com.game.karting.UserInfo dealer = 8;
  if (has_dealer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dealer(), target);
  }

  // required int32 lianzhuang = 9;
  if (has_lianzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lianzhuang(), target);
  }

  // required int32 index = 10;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->index(), target);
  }

  // required int32 dealertotalwin = 11;
  if (has_dealertotalwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dealertotalwin(), target);
  }

  // repeated int32 indexlist = 12;
  for (int i = 0; i < this->indexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->indexlist(i), target);
  }

  // repeated .com.game.karting.BettingZone bettingzone = 13;
  for (int i = 0; i < this->bettingzone_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->bettingzone(i), target);
  }

  // required int32 visiable = 14;
  if (has_visiable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->visiable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.GameSceneResponse)
  return target;
}

int GameSceneResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 tablestatus = 2;
    if (has_tablestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tablestatus());
    }

    // required int32 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 userstatus = 4;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userstatus());
    }

    // required int32 timeout = 5;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // required int32 players = 6;
    if (has_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->players());
    }

    // required .com.game.karting.UserInfo dealer = 8;
    if (has_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealer());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 lianzhuang = 9;
    if (has_lianzhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lianzhuang());
    }

    // required int32 index = 10;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 dealertotalwin = 11;
    if (has_dealertotalwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealertotalwin());
    }

    // required int32 visiable = 14;
    if (has_visiable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visiable());
    }

  }
  // repeated int32 limit = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->limit(i));
    }
    total_size += 1 * this->limit_size() + data_size;
  }

  // repeated int32 indexlist = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indexlist(i));
    }
    total_size += 1 * this->indexlist_size() + data_size;
  }

  // repeated .com.game.karting.BettingZone bettingzone = 13;
  total_size += 1 * this->bettingzone_size();
  for (int i = 0; i < this->bettingzone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bettingzone(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameSceneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameSceneResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameSceneResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameSceneResponse::MergeFrom(const GameSceneResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  limit_.MergeFrom(from.limit_);
  indexlist_.MergeFrom(from.indexlist_);
  bettingzone_.MergeFrom(from.bettingzone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_tablestatus()) {
      set_tablestatus(from.tablestatus());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_players()) {
      set_players(from.players());
    }
    if (from.has_dealer()) {
      mutable_dealer()->::com::game::karting::UserInfo::MergeFrom(from.dealer());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lianzhuang()) {
      set_lianzhuang(from.lianzhuang());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_dealertotalwin()) {
      set_dealertotalwin(from.dealertotalwin());
    }
    if (from.has_visiable()) {
      set_visiable(from.visiable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameSceneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameSceneResponse::CopyFrom(const GameSceneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameSceneResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x000027bf) != 0x000027bf) return false;

  if (has_dealer()) {
    if (!this->dealer().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->bettingzone())) return false;
  return true;
}

void GameSceneResponse::Swap(GameSceneResponse* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(tablestatus_, other->tablestatus_);
    std::swap(userid_, other->userid_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(timeout_, other->timeout_);
    std::swap(players_, other->players_);
    limit_.Swap(&other->limit_);
    std::swap(dealer_, other->dealer_);
    std::swap(lianzhuang_, other->lianzhuang_);
    std::swap(index_, other->index_);
    std::swap(dealertotalwin_, other->dealertotalwin_);
    indexlist_.Swap(&other->indexlist_);
    bettingzone_.Swap(&other->bettingzone_);
    std::swap(visiable_, other->visiable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameSceneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameSceneResponse_descriptor_;
  metadata.reflection = GameSceneResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameReadyStartBroadcast::kTableidFieldNumber;
const int GameReadyStartBroadcast::kTimeoutFieldNumber;
#endif  // !_MSC_VER

GameReadyStartBroadcast::GameReadyStartBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.GameReadyStartBroadcast)
}

void GameReadyStartBroadcast::InitAsDefaultInstance() {
}

GameReadyStartBroadcast::GameReadyStartBroadcast(const GameReadyStartBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.GameReadyStartBroadcast)
}

void GameReadyStartBroadcast::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameReadyStartBroadcast::~GameReadyStartBroadcast() {
  // @@protoc_insertion_point(destructor:com.game.karting.GameReadyStartBroadcast)
  SharedDtor();
}

void GameReadyStartBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameReadyStartBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameReadyStartBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameReadyStartBroadcast_descriptor_;
}

const GameReadyStartBroadcast& GameReadyStartBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

GameReadyStartBroadcast* GameReadyStartBroadcast::default_instance_ = NULL;

GameReadyStartBroadcast* GameReadyStartBroadcast::New() const {
  return new GameReadyStartBroadcast;
}

void GameReadyStartBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameReadyStartBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, timeout_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameReadyStartBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.GameReadyStartBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.GameReadyStartBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.GameReadyStartBroadcast)
  return false;
#undef DO_
}

void GameReadyStartBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.GameReadyStartBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.GameReadyStartBroadcast)
}

::google::protobuf::uint8* GameReadyStartBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.GameReadyStartBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.GameReadyStartBroadcast)
  return target;
}

int GameReadyStartBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameReadyStartBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameReadyStartBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameReadyStartBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameReadyStartBroadcast::MergeFrom(const GameReadyStartBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameReadyStartBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameReadyStartBroadcast::CopyFrom(const GameReadyStartBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameReadyStartBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GameReadyStartBroadcast::Swap(GameReadyStartBroadcast* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameReadyStartBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameReadyStartBroadcast_descriptor_;
  metadata.reflection = GameReadyStartBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameStartBroadcast::kTableidFieldNumber;
const int GameStartBroadcast::kTimeoutFieldNumber;
const int GameStartBroadcast::kDealerFieldNumber;
const int GameStartBroadcast::kLimitFieldNumber;
const int GameStartBroadcast::kLianzhuangFieldNumber;
#endif  // !_MSC_VER

GameStartBroadcast::GameStartBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.GameStartBroadcast)
}

void GameStartBroadcast::InitAsDefaultInstance() {
}

GameStartBroadcast::GameStartBroadcast(const GameStartBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.GameStartBroadcast)
}

void GameStartBroadcast::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  timeout_ = 0;
  dealer_ = 0;
  lianzhuang_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameStartBroadcast::~GameStartBroadcast() {
  // @@protoc_insertion_point(destructor:com.game.karting.GameStartBroadcast)
  SharedDtor();
}

void GameStartBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameStartBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameStartBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameStartBroadcast_descriptor_;
}

const GameStartBroadcast& GameStartBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

GameStartBroadcast* GameStartBroadcast::default_instance_ = NULL;

GameStartBroadcast* GameStartBroadcast::New() const {
  return new GameStartBroadcast;
}

void GameStartBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GameStartBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, timeout_);
  ZR_(dealer_, lianzhuang_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  limit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameStartBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.GameStartBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dealer;
        break;
      }

      // required int32 dealer = 3;
      case 3: {
        if (tag == 24) {
         parse_dealer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealer_)));
          set_has_dealer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        break;
      }

      // repeated int32 limit = 4;
      case 4: {
        if (tag == 32) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_limit())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_limit;
        if (input->ExpectTag(40)) goto parse_lianzhuang;
        break;
      }

      // required int32 lianzhuang = 5;
      case 5: {
        if (tag == 40) {
         parse_lianzhuang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lianzhuang_)));
          set_has_lianzhuang();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.GameStartBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.GameStartBroadcast)
  return false;
#undef DO_
}

void GameStartBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.GameStartBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }

  // required int32 dealer = 3;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dealer(), output);
  }

  // repeated int32 limit = 4;
  for (int i = 0; i < this->limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->limit(i), output);
  }

  // required int32 lianzhuang = 5;
  if (has_lianzhuang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lianzhuang(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.GameStartBroadcast)
}

::google::protobuf::uint8* GameStartBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.GameStartBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }

  // required int32 dealer = 3;
  if (has_dealer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dealer(), target);
  }

  // repeated int32 limit = 4;
  for (int i = 0; i < this->limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->limit(i), target);
  }

  // required int32 lianzhuang = 5;
  if (has_lianzhuang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lianzhuang(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.GameStartBroadcast)
  return target;
}

int GameStartBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // required int32 dealer = 3;
    if (has_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealer());
    }

    // required int32 lianzhuang = 5;
    if (has_lianzhuang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lianzhuang());
    }

  }
  // repeated int32 limit = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->limit(i));
    }
    total_size += 1 * this->limit_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameStartBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameStartBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameStartBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameStartBroadcast::MergeFrom(const GameStartBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  limit_.MergeFrom(from.limit_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_dealer()) {
      set_dealer(from.dealer());
    }
    if (from.has_lianzhuang()) {
      set_lianzhuang(from.lianzhuang());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameStartBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameStartBroadcast::CopyFrom(const GameStartBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameStartBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void GameStartBroadcast::Swap(GameStartBroadcast* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(timeout_, other->timeout_);
    std::swap(dealer_, other->dealer_);
    limit_.Swap(&other->limit_);
    std::swap(lianzhuang_, other->lianzhuang_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameStartBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameStartBroadcast_descriptor_;
  metadata.reflection = GameStartBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserZhuangRequest::kTypeFieldNumber;
#endif  // !_MSC_VER

UserZhuangRequest::UserZhuangRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.UserZhuangRequest)
}

void UserZhuangRequest::InitAsDefaultInstance() {
}

UserZhuangRequest::UserZhuangRequest(const UserZhuangRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.UserZhuangRequest)
}

void UserZhuangRequest::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserZhuangRequest::~UserZhuangRequest() {
  // @@protoc_insertion_point(destructor:com.game.karting.UserZhuangRequest)
  SharedDtor();
}

void UserZhuangRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserZhuangRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserZhuangRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserZhuangRequest_descriptor_;
}

const UserZhuangRequest& UserZhuangRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

UserZhuangRequest* UserZhuangRequest::default_instance_ = NULL;

UserZhuangRequest* UserZhuangRequest::New() const {
  return new UserZhuangRequest;
}

void UserZhuangRequest::Clear() {
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserZhuangRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.UserZhuangRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.UserZhuangRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.UserZhuangRequest)
  return false;
#undef DO_
}

void UserZhuangRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.UserZhuangRequest)
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.UserZhuangRequest)
}

::google::protobuf::uint8* UserZhuangRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.UserZhuangRequest)
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.UserZhuangRequest)
  return target;
}

int UserZhuangRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserZhuangRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserZhuangRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserZhuangRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserZhuangRequest::MergeFrom(const UserZhuangRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserZhuangRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserZhuangRequest::CopyFrom(const UserZhuangRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserZhuangRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UserZhuangRequest::Swap(UserZhuangRequest* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserZhuangRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserZhuangRequest_descriptor_;
  metadata.reflection = UserZhuangRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserZhuangResponse::kTableidFieldNumber;
const int UserZhuangResponse::kUseridFieldNumber;
const int UserZhuangResponse::kResultFieldNumber;
const int UserZhuangResponse::kTypeFieldNumber;
const int UserZhuangResponse::kMsgFieldNumber;
const int UserZhuangResponse::kZhuanglistFieldNumber;
#endif  // !_MSC_VER

UserZhuangResponse::UserZhuangResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.UserZhuangResponse)
}

void UserZhuangResponse::InitAsDefaultInstance() {
}

UserZhuangResponse::UserZhuangResponse(const UserZhuangResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.UserZhuangResponse)
}

void UserZhuangResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tableid_ = 0;
  userid_ = 0;
  result_ = 0;
  type_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserZhuangResponse::~UserZhuangResponse() {
  // @@protoc_insertion_point(destructor:com.game.karting.UserZhuangResponse)
  SharedDtor();
}

void UserZhuangResponse::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void UserZhuangResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserZhuangResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserZhuangResponse_descriptor_;
}

const UserZhuangResponse& UserZhuangResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

UserZhuangResponse* UserZhuangResponse::default_instance_ = NULL;

UserZhuangResponse* UserZhuangResponse::New() const {
  return new UserZhuangResponse;
}

void UserZhuangResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserZhuangResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(tableid_, type_);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  zhuanglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserZhuangResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.UserZhuangResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // required int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg;
        break;
      }

      // required string msg = 5;
      case 5: {
        if (tag == 42) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_zhuanglist;
        break;
      }

      // repeated .com.game.karting.UserInfo zhuanglist = 6;
      case 6: {
        if (tag == 50) {
         parse_zhuanglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhuanglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_zhuanglist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.UserZhuangResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.UserZhuangResponse)
  return false;
#undef DO_
}

void UserZhuangResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.UserZhuangResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  // repeated .com.game.karting.UserInfo zhuanglist = 6;
  for (int i = 0; i < this->zhuanglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->zhuanglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.UserZhuangResponse)
}

::google::protobuf::uint8* UserZhuangResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.UserZhuangResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required string msg = 5;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // repeated .com.game.karting.UserInfo zhuanglist = 6;
  for (int i = 0; i < this->zhuanglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->zhuanglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.UserZhuangResponse)
  return target;
}

int UserZhuangResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string msg = 5;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated .com.game.karting.UserInfo zhuanglist = 6;
  total_size += 1 * this->zhuanglist_size();
  for (int i = 0; i < this->zhuanglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhuanglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserZhuangResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserZhuangResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserZhuangResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserZhuangResponse::MergeFrom(const UserZhuangResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhuanglist_.MergeFrom(from.zhuanglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserZhuangResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserZhuangResponse::CopyFrom(const UserZhuangResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserZhuangResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->zhuanglist())) return false;
  return true;
}

void UserZhuangResponse::Swap(UserZhuangResponse* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(result_, other->result_);
    std::swap(type_, other->type_);
    std::swap(msg_, other->msg_);
    zhuanglist_.Swap(&other->zhuanglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserZhuangResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserZhuangResponse_descriptor_;
  metadata.reflection = UserZhuangResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComfirmZhuangBroadcast::kTableidFieldNumber;
const int ComfirmZhuangBroadcast::kDealerFieldNumber;
#endif  // !_MSC_VER

ComfirmZhuangBroadcast::ComfirmZhuangBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.ComfirmZhuangBroadcast)
}

void ComfirmZhuangBroadcast::InitAsDefaultInstance() {
  dealer_ = const_cast< ::com::game::karting::UserInfo*>(&::com::game::karting::UserInfo::default_instance());
}

ComfirmZhuangBroadcast::ComfirmZhuangBroadcast(const ComfirmZhuangBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.ComfirmZhuangBroadcast)
}

void ComfirmZhuangBroadcast::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  dealer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComfirmZhuangBroadcast::~ComfirmZhuangBroadcast() {
  // @@protoc_insertion_point(destructor:com.game.karting.ComfirmZhuangBroadcast)
  SharedDtor();
}

void ComfirmZhuangBroadcast::SharedDtor() {
  if (this != default_instance_) {
    delete dealer_;
  }
}

void ComfirmZhuangBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComfirmZhuangBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComfirmZhuangBroadcast_descriptor_;
}

const ComfirmZhuangBroadcast& ComfirmZhuangBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

ComfirmZhuangBroadcast* ComfirmZhuangBroadcast::default_instance_ = NULL;

ComfirmZhuangBroadcast* ComfirmZhuangBroadcast::New() const {
  return new ComfirmZhuangBroadcast;
}

void ComfirmZhuangBroadcast::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tableid_ = 0;
    if (has_dealer()) {
      if (dealer_ != NULL) dealer_->::com::game::karting::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComfirmZhuangBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.ComfirmZhuangBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dealer;
        break;
      }

      // required .com.game.karting.UserInfo dealer = 2;
      case 2: {
        if (tag == 18) {
         parse_dealer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dealer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.ComfirmZhuangBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.ComfirmZhuangBroadcast)
  return false;
#undef DO_
}

void ComfirmZhuangBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.ComfirmZhuangBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required .com.game.karting.UserInfo dealer = 2;
  if (has_dealer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dealer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.ComfirmZhuangBroadcast)
}

::google::protobuf::uint8* ComfirmZhuangBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.ComfirmZhuangBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required .com.game.karting.UserInfo dealer = 2;
  if (has_dealer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dealer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.ComfirmZhuangBroadcast)
  return target;
}

int ComfirmZhuangBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required .com.game.karting.UserInfo dealer = 2;
    if (has_dealer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dealer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComfirmZhuangBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComfirmZhuangBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComfirmZhuangBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComfirmZhuangBroadcast::MergeFrom(const ComfirmZhuangBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_dealer()) {
      mutable_dealer()->::com::game::karting::UserInfo::MergeFrom(from.dealer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComfirmZhuangBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComfirmZhuangBroadcast::CopyFrom(const ComfirmZhuangBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComfirmZhuangBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dealer()) {
    if (!this->dealer().IsInitialized()) return false;
  }
  return true;
}

void ComfirmZhuangBroadcast::Swap(ComfirmZhuangBroadcast* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(dealer_, other->dealer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComfirmZhuangBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComfirmZhuangBroadcast_descriptor_;
  metadata.reflection = ComfirmZhuangBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBettingRequest::kJettonFieldNumber;
const int UserBettingRequest::kIndexFieldNumber;
#endif  // !_MSC_VER

UserBettingRequest::UserBettingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.UserBettingRequest)
}

void UserBettingRequest::InitAsDefaultInstance() {
}

UserBettingRequest::UserBettingRequest(const UserBettingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.UserBettingRequest)
}

void UserBettingRequest::SharedCtor() {
  _cached_size_ = 0;
  jetton_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBettingRequest::~UserBettingRequest() {
  // @@protoc_insertion_point(destructor:com.game.karting.UserBettingRequest)
  SharedDtor();
}

void UserBettingRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBettingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBettingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBettingRequest_descriptor_;
}

const UserBettingRequest& UserBettingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

UserBettingRequest* UserBettingRequest::default_instance_ = NULL;

UserBettingRequest* UserBettingRequest::New() const {
  return new UserBettingRequest;
}

void UserBettingRequest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBettingRequest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(jetton_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBettingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.UserBettingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 jetton = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.UserBettingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.UserBettingRequest)
  return false;
#undef DO_
}

void UserBettingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.UserBettingRequest)
  // required int32 jetton = 1;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->jetton(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.UserBettingRequest)
}

::google::protobuf::uint8* UserBettingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.UserBettingRequest)
  // required int32 jetton = 1;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->jetton(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.UserBettingRequest)
  return target;
}

int UserBettingRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 jetton = 1;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBettingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBettingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBettingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBettingRequest::MergeFrom(const UserBettingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBettingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBettingRequest::CopyFrom(const UserBettingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBettingRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserBettingRequest::Swap(UserBettingRequest* other) {
  if (other != this) {
    std::swap(jetton_, other->jetton_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBettingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBettingRequest_descriptor_;
  metadata.reflection = UserBettingRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBettingBroadcast::kTableidFieldNumber;
const int UserBettingBroadcast::kUseridFieldNumber;
const int UserBettingBroadcast::kJettonFieldNumber;
const int UserBettingBroadcast::kIndexFieldNumber;
const int UserBettingBroadcast::kGoldFieldNumber;
const int UserBettingBroadcast::kLimitFieldNumber;
const int UserBettingBroadcast::kResultFieldNumber;
const int UserBettingBroadcast::kMsgFieldNumber;
const int UserBettingBroadcast::kDataFieldNumber;
const int UserBettingBroadcast::kVisiableFieldNumber;
#endif  // !_MSC_VER

UserBettingBroadcast::UserBettingBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.UserBettingBroadcast)
}

void UserBettingBroadcast::InitAsDefaultInstance() {
}

UserBettingBroadcast::UserBettingBroadcast(const UserBettingBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.UserBettingBroadcast)
}

void UserBettingBroadcast::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tableid_ = 0;
  userid_ = 0;
  jetton_ = 0;
  index_ = 0;
  gold_ = 0;
  result_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  visiable_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBettingBroadcast::~UserBettingBroadcast() {
  // @@protoc_insertion_point(destructor:com.game.karting.UserBettingBroadcast)
  SharedDtor();
}

void UserBettingBroadcast::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void UserBettingBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBettingBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBettingBroadcast_descriptor_;
}

const UserBettingBroadcast& UserBettingBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

UserBettingBroadcast* UserBettingBroadcast::default_instance_ = NULL;

UserBettingBroadcast* UserBettingBroadcast::New() const {
  return new UserBettingBroadcast;
}

void UserBettingBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserBettingBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(tableid_, index_);
    ZR_(gold_, result_);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  visiable_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  limit_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBettingBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.UserBettingBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_jetton;
        break;
      }

      // required int32 jetton = 3;
      case 3: {
        if (tag == 24) {
         parse_jetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jetton_)));
          set_has_jetton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gold;
        break;
      }

      // required int32 gold = 5;
      case 5: {
        if (tag == 40) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        break;
      }

      // repeated int32 limit = 6;
      case 6: {
        if (tag == 48) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_limit())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_limit())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_limit;
        if (input->ExpectTag(56)) goto parse_result;
        break;
      }

      // required int32 result = 7;
      case 7: {
        if (tag == 56) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_msg;
        break;
      }

      // required string msg = 8;
      case 8: {
        if (tag == 66) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        break;
      }

      // repeated .com.game.karting.BettingZone data = 9;
      case 9: {
        if (tag == 74) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_data;
        if (input->ExpectTag(80)) goto parse_visiable;
        break;
      }

      // required int32 visiable = 10;
      case 10: {
        if (tag == 80) {
         parse_visiable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &visiable_)));
          set_has_visiable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.UserBettingBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.UserBettingBroadcast)
  return false;
#undef DO_
}

void UserBettingBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.UserBettingBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 jetton = 3;
  if (has_jetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->jetton(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  // required int32 gold = 5;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gold(), output);
  }

  // repeated int32 limit = 6;
  for (int i = 0; i < this->limit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->limit(i), output);
  }

  // required int32 result = 7;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->result(), output);
  }

  // required string msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // repeated .com.game.karting.BettingZone data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->data(i), output);
  }

  // required int32 visiable = 10;
  if (has_visiable()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->visiable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.UserBettingBroadcast)
}

::google::protobuf::uint8* UserBettingBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.UserBettingBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 jetton = 3;
  if (has_jetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->jetton(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  // required int32 gold = 5;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gold(), target);
  }

  // repeated int32 limit = 6;
  for (int i = 0; i < this->limit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->limit(i), target);
  }

  // required int32 result = 7;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->result(), target);
  }

  // required string msg = 8;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // repeated .com.game.karting.BettingZone data = 9;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->data(i), target);
  }

  // required int32 visiable = 10;
  if (has_visiable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->visiable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.UserBettingBroadcast)
  return target;
}

int UserBettingBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 jetton = 3;
    if (has_jetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jetton());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 gold = 5;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // required int32 result = 7;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string msg = 8;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required int32 visiable = 10;
    if (has_visiable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->visiable());
    }

  }
  // repeated int32 limit = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->limit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->limit(i));
    }
    total_size += 1 * this->limit_size() + data_size;
  }

  // repeated .com.game.karting.BettingZone data = 9;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBettingBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBettingBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBettingBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBettingBroadcast::MergeFrom(const UserBettingBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  limit_.MergeFrom(from.limit_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_jetton()) {
      set_jetton(from.jetton());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_visiable()) {
      set_visiable(from.visiable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBettingBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBettingBroadcast::CopyFrom(const UserBettingBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBettingBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x000002df) != 0x000002df) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void UserBettingBroadcast::Swap(UserBettingBroadcast* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(jetton_, other->jetton_);
    std::swap(index_, other->index_);
    std::swap(gold_, other->gold_);
    limit_.Swap(&other->limit_);
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    data_.Swap(&other->data_);
    std::swap(visiable_, other->visiable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBettingBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBettingBroadcast_descriptor_;
  metadata.reflection = UserBettingBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LotteryBroadcast::kTableidFieldNumber;
const int LotteryBroadcast::kTimeoutFieldNumber;
const int LotteryBroadcast::kIndexFieldNumber;
const int LotteryBroadcast::kStartFieldNumber;
const int LotteryBroadcast::kDataFieldNumber;
#endif  // !_MSC_VER

LotteryBroadcast::LotteryBroadcast()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.LotteryBroadcast)
}

void LotteryBroadcast::InitAsDefaultInstance() {
}

LotteryBroadcast::LotteryBroadcast(const LotteryBroadcast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.LotteryBroadcast)
}

void LotteryBroadcast::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  timeout_ = 0;
  index_ = 0;
  start_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LotteryBroadcast::~LotteryBroadcast() {
  // @@protoc_insertion_point(destructor:com.game.karting.LotteryBroadcast)
  SharedDtor();
}

void LotteryBroadcast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LotteryBroadcast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LotteryBroadcast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryBroadcast_descriptor_;
}

const LotteryBroadcast& LotteryBroadcast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

LotteryBroadcast* LotteryBroadcast::default_instance_ = NULL;

LotteryBroadcast* LotteryBroadcast::New() const {
  return new LotteryBroadcast;
}

void LotteryBroadcast::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LotteryBroadcast*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, start_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LotteryBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.LotteryBroadcast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required int32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // required int32 start = 4;
      case 4: {
        if (tag == 32) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // repeated .com.game.karting.BettingZone data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.LotteryBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.LotteryBroadcast)
  return false;
#undef DO_
}

void LotteryBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.LotteryBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }

  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  // required int32 start = 4;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->start(), output);
  }

  // repeated .com.game.karting.BettingZone data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.LotteryBroadcast)
}

::google::protobuf::uint8* LotteryBroadcast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.LotteryBroadcast)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }

  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  // required int32 start = 4;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->start(), target);
  }

  // repeated .com.game.karting.BettingZone data = 5;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.LotteryBroadcast)
  return target;
}

int LotteryBroadcast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 start = 4;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

  }
  // repeated .com.game.karting.BettingZone data = 5;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LotteryBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LotteryBroadcast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LotteryBroadcast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LotteryBroadcast::MergeFrom(const LotteryBroadcast& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LotteryBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LotteryBroadcast::CopyFrom(const LotteryBroadcast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LotteryBroadcast::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void LotteryBroadcast::Swap(LotteryBroadcast* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(timeout_, other->timeout_);
    std::swap(index_, other->index_);
    std::swap(start_, other->start_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LotteryBroadcast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LotteryBroadcast_descriptor_;
  metadata.reflection = LotteryBroadcast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Balance::kTableidFieldNumber;
const int Balance::kUseridFieldNumber;
const int Balance::kUserjettonFieldNumber;
const int Balance::kUserwinFieldNumber;
const int Balance::kUsergoldFieldNumber;
const int Balance::kTotaljettonFieldNumber;
const int Balance::kDealerwinFieldNumber;
const int Balance::kDealergoldFieldNumber;
const int Balance::kDealertotalwinFieldNumber;
const int Balance::kIndexFieldNumber;
const int Balance::kTimeoutFieldNumber;
const int Balance::kIndexlistFieldNumber;
#endif  // !_MSC_VER

Balance::Balance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.Balance)
}

void Balance::InitAsDefaultInstance() {
}

Balance::Balance(const Balance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.Balance)
}

void Balance::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  userid_ = 0;
  userjetton_ = 0;
  userwin_ = 0;
  usergold_ = 0;
  totaljetton_ = 0;
  dealerwin_ = 0;
  dealergold_ = 0;
  dealertotalwin_ = 0;
  index_ = 0;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Balance::~Balance() {
  // @@protoc_insertion_point(destructor:com.game.karting.Balance)
  SharedDtor();
}

void Balance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Balance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Balance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Balance_descriptor_;
}

const Balance& Balance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

Balance* Balance::default_instance_ = NULL;

Balance* Balance::New() const {
  return new Balance;
}

void Balance::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Balance*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(tableid_, dealergold_);
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(dealertotalwin_, index_);
    timeout_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  indexlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Balance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.Balance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userjetton;
        break;
      }

      // required int32 userjetton = 3;
      case 3: {
        if (tag == 24) {
         parse_userjetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userjetton_)));
          set_has_userjetton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userwin;
        break;
      }

      // required int32 userwin = 4;
      case 4: {
        if (tag == 32) {
         parse_userwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userwin_)));
          set_has_userwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_usergold;
        break;
      }

      // required int32 usergold = 5;
      case 5: {
        if (tag == 40) {
         parse_usergold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usergold_)));
          set_has_usergold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totaljetton;
        break;
      }

      // required int32 totaljetton = 6;
      case 6: {
        if (tag == 48) {
         parse_totaljetton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaljetton_)));
          set_has_totaljetton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dealerwin;
        break;
      }

      // required int32 dealerwin = 7;
      case 7: {
        if (tag == 56) {
         parse_dealerwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealerwin_)));
          set_has_dealerwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_dealergold;
        break;
      }

      // required int32 dealergold = 8;
      case 8: {
        if (tag == 64) {
         parse_dealergold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealergold_)));
          set_has_dealergold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_dealertotalwin;
        break;
      }

      // required int32 dealertotalwin = 9;
      case 9: {
        if (tag == 72) {
         parse_dealertotalwin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealertotalwin_)));
          set_has_dealertotalwin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_index;
        break;
      }

      // required int32 index = 10;
      case 10: {
        if (tag == 80) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_timeout;
        break;
      }

      // required int32 timeout = 11;
      case 11: {
        if (tag == 88) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_indexlist;
        break;
      }

      // repeated int32 indexlist = 12;
      case 12: {
        if (tag == 96) {
         parse_indexlist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_indexlist())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indexlist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_indexlist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.Balance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.Balance)
  return false;
#undef DO_
}

void Balance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.Balance)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 userjetton = 3;
  if (has_userjetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->userjetton(), output);
  }

  // required int32 userwin = 4;
  if (has_userwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->userwin(), output);
  }

  // required int32 usergold = 5;
  if (has_usergold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->usergold(), output);
  }

  // required int32 totaljetton = 6;
  if (has_totaljetton()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totaljetton(), output);
  }

  // required int32 dealerwin = 7;
  if (has_dealerwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dealerwin(), output);
  }

  // required int32 dealergold = 8;
  if (has_dealergold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dealergold(), output);
  }

  // required int32 dealertotalwin = 9;
  if (has_dealertotalwin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dealertotalwin(), output);
  }

  // required int32 index = 10;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->index(), output);
  }

  // required int32 timeout = 11;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->timeout(), output);
  }

  // repeated int32 indexlist = 12;
  for (int i = 0; i < this->indexlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->indexlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.Balance)
}

::google::protobuf::uint8* Balance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.Balance)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 userjetton = 3;
  if (has_userjetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->userjetton(), target);
  }

  // required int32 userwin = 4;
  if (has_userwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->userwin(), target);
  }

  // required int32 usergold = 5;
  if (has_usergold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->usergold(), target);
  }

  // required int32 totaljetton = 6;
  if (has_totaljetton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totaljetton(), target);
  }

  // required int32 dealerwin = 7;
  if (has_dealerwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dealerwin(), target);
  }

  // required int32 dealergold = 8;
  if (has_dealergold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dealergold(), target);
  }

  // required int32 dealertotalwin = 9;
  if (has_dealertotalwin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dealertotalwin(), target);
  }

  // required int32 index = 10;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->index(), target);
  }

  // required int32 timeout = 11;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->timeout(), target);
  }

  // repeated int32 indexlist = 12;
  for (int i = 0; i < this->indexlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->indexlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.Balance)
  return target;
}

int Balance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 userjetton = 3;
    if (has_userjetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userjetton());
    }

    // required int32 userwin = 4;
    if (has_userwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userwin());
    }

    // required int32 usergold = 5;
    if (has_usergold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usergold());
    }

    // required int32 totaljetton = 6;
    if (has_totaljetton()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaljetton());
    }

    // required int32 dealerwin = 7;
    if (has_dealerwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealerwin());
    }

    // required int32 dealergold = 8;
    if (has_dealergold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealergold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 dealertotalwin = 9;
    if (has_dealertotalwin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealertotalwin());
    }

    // required int32 index = 10;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // required int32 timeout = 11;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

  }
  // repeated int32 indexlist = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->indexlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->indexlist(i));
    }
    total_size += 1 * this->indexlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Balance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Balance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Balance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Balance::MergeFrom(const Balance& from) {
  GOOGLE_CHECK_NE(&from, this);
  indexlist_.MergeFrom(from.indexlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userjetton()) {
      set_userjetton(from.userjetton());
    }
    if (from.has_userwin()) {
      set_userwin(from.userwin());
    }
    if (from.has_usergold()) {
      set_usergold(from.usergold());
    }
    if (from.has_totaljetton()) {
      set_totaljetton(from.totaljetton());
    }
    if (from.has_dealerwin()) {
      set_dealerwin(from.dealerwin());
    }
    if (from.has_dealergold()) {
      set_dealergold(from.dealergold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dealertotalwin()) {
      set_dealertotalwin(from.dealertotalwin());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Balance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Balance::CopyFrom(const Balance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Balance::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void Balance::Swap(Balance* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(userjetton_, other->userjetton_);
    std::swap(userwin_, other->userwin_);
    std::swap(usergold_, other->usergold_);
    std::swap(totaljetton_, other->totaljetton_);
    std::swap(dealerwin_, other->dealerwin_);
    std::swap(dealergold_, other->dealergold_);
    std::swap(dealertotalwin_, other->dealertotalwin_);
    std::swap(index_, other->index_);
    std::swap(timeout_, other->timeout_);
    indexlist_.Swap(&other->indexlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Balance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Balance_descriptor_;
  metadata.reflection = Balance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZhuangListResponse::kTableidFieldNumber;
const int ZhuangListResponse::kUseridFieldNumber;
const int ZhuangListResponse::kZhuanglistFieldNumber;
#endif  // !_MSC_VER

ZhuangListResponse::ZhuangListResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.ZhuangListResponse)
}

void ZhuangListResponse::InitAsDefaultInstance() {
}

ZhuangListResponse::ZhuangListResponse(const ZhuangListResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.ZhuangListResponse)
}

void ZhuangListResponse::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  userid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZhuangListResponse::~ZhuangListResponse() {
  // @@protoc_insertion_point(destructor:com.game.karting.ZhuangListResponse)
  SharedDtor();
}

void ZhuangListResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZhuangListResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZhuangListResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZhuangListResponse_descriptor_;
}

const ZhuangListResponse& ZhuangListResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

ZhuangListResponse* ZhuangListResponse::default_instance_ = NULL;

ZhuangListResponse* ZhuangListResponse::New() const {
  return new ZhuangListResponse;
}

void ZhuangListResponse::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZhuangListResponse*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, userid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  zhuanglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZhuangListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.ZhuangListResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zhuanglist;
        break;
      }

      // repeated .com.game.karting.UserInfo zhuanglist = 3;
      case 3: {
        if (tag == 26) {
         parse_zhuanglist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zhuanglist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_zhuanglist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.ZhuangListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.ZhuangListResponse)
  return false;
#undef DO_
}

void ZhuangListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.ZhuangListResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // repeated .com.game.karting.UserInfo zhuanglist = 3;
  for (int i = 0; i < this->zhuanglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zhuanglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.ZhuangListResponse)
}

::google::protobuf::uint8* ZhuangListResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.ZhuangListResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // repeated .com.game.karting.UserInfo zhuanglist = 3;
  for (int i = 0; i < this->zhuanglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zhuanglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.ZhuangListResponse)
  return target;
}

int ZhuangListResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

  }
  // repeated .com.game.karting.UserInfo zhuanglist = 3;
  total_size += 1 * this->zhuanglist_size();
  for (int i = 0; i < this->zhuanglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zhuanglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZhuangListResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZhuangListResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZhuangListResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZhuangListResponse::MergeFrom(const ZhuangListResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  zhuanglist_.MergeFrom(from.zhuanglist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZhuangListResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZhuangListResponse::CopyFrom(const ZhuangListResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZhuangListResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->zhuanglist())) return false;
  return true;
}

void ZhuangListResponse::Swap(ZhuangListResponse* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    zhuanglist_.Swap(&other->zhuanglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZhuangListResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZhuangListResponse_descriptor_;
  metadata.reflection = ZhuangListResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameRecordResponse::kRecordFieldNumber;
#endif  // !_MSC_VER

GameRecordResponse::GameRecordResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.GameRecordResponse)
}

void GameRecordResponse::InitAsDefaultInstance() {
}

GameRecordResponse::GameRecordResponse(const GameRecordResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.GameRecordResponse)
}

void GameRecordResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameRecordResponse::~GameRecordResponse() {
  // @@protoc_insertion_point(destructor:com.game.karting.GameRecordResponse)
  SharedDtor();
}

void GameRecordResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameRecordResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameRecordResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameRecordResponse_descriptor_;
}

const GameRecordResponse& GameRecordResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

GameRecordResponse* GameRecordResponse::default_instance_ = NULL;

GameRecordResponse* GameRecordResponse::New() const {
  return new GameRecordResponse;
}

void GameRecordResponse::Clear() {
  record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameRecordResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.GameRecordResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 record = 1;
      case 1: {
        if (tag == 8) {
         parse_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_record())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_record())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_record;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.GameRecordResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.GameRecordResponse)
  return false;
#undef DO_
}

void GameRecordResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.GameRecordResponse)
  // repeated int32 record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.GameRecordResponse)
}

::google::protobuf::uint8* GameRecordResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.GameRecordResponse)
  // repeated int32 record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.GameRecordResponse)
  return target;
}

int GameRecordResponse::ByteSize() const {
  int total_size = 0;

  // repeated int32 record = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->record(i));
    }
    total_size += 1 * this->record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameRecordResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameRecordResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameRecordResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameRecordResponse::MergeFrom(const GameRecordResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameRecordResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameRecordResponse::CopyFrom(const GameRecordResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameRecordResponse::IsInitialized() const {

  return true;
}

void GameRecordResponse::Swap(GameRecordResponse* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameRecordResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameRecordResponse_descriptor_;
  metadata.reflection = GameRecordResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoResponse::kTableidFieldNumber;
const int UserInfoResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

UserInfoResponse::UserInfoResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.UserInfoResponse)
}

void UserInfoResponse::InitAsDefaultInstance() {
  info_ = const_cast< ::com::game::karting::UserInfo*>(&::com::game::karting::UserInfo::default_instance());
}

UserInfoResponse::UserInfoResponse(const UserInfoResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.UserInfoResponse)
}

void UserInfoResponse::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoResponse::~UserInfoResponse() {
  // @@protoc_insertion_point(destructor:com.game.karting.UserInfoResponse)
  SharedDtor();
}

void UserInfoResponse::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UserInfoResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoResponse_descriptor_;
}

const UserInfoResponse& UserInfoResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

UserInfoResponse* UserInfoResponse::default_instance_ = NULL;

UserInfoResponse* UserInfoResponse::New() const {
  return new UserInfoResponse;
}

void UserInfoResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    tableid_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::com::game::karting::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.UserInfoResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .com.game.karting.UserInfo info = 2;
      case 2: {
        if (tag == 18) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.UserInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.UserInfoResponse)
  return false;
#undef DO_
}

void UserInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.UserInfoResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required .com.game.karting.UserInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.UserInfoResponse)
}

::google::protobuf::uint8* UserInfoResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.UserInfoResponse)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required .com.game.karting.UserInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.UserInfoResponse)
  return target;
}

int UserInfoResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required .com.game.karting.UserInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoResponse::MergeFrom(const UserInfoResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_info()) {
      mutable_info()->::com::game::karting::UserInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoResponse::CopyFrom(const UserInfoResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void UserInfoResponse::Swap(UserInfoResponse* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoResponse_descriptor_;
  metadata.reflection = UserInfoResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRobotZhuang::kTableidFieldNumber;
const int NotifyRobotZhuang::kUseridFieldNumber;
const int NotifyRobotZhuang::kTypeFieldNumber;
#endif  // !_MSC_VER

NotifyRobotZhuang::NotifyRobotZhuang()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.NotifyRobotZhuang)
}

void NotifyRobotZhuang::InitAsDefaultInstance() {
}

NotifyRobotZhuang::NotifyRobotZhuang(const NotifyRobotZhuang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.NotifyRobotZhuang)
}

void NotifyRobotZhuang::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  userid_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRobotZhuang::~NotifyRobotZhuang() {
  // @@protoc_insertion_point(destructor:com.game.karting.NotifyRobotZhuang)
  SharedDtor();
}

void NotifyRobotZhuang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRobotZhuang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRobotZhuang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRobotZhuang_descriptor_;
}

const NotifyRobotZhuang& NotifyRobotZhuang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

NotifyRobotZhuang* NotifyRobotZhuang::default_instance_ = NULL;

NotifyRobotZhuang* NotifyRobotZhuang::New() const {
  return new NotifyRobotZhuang;
}

void NotifyRobotZhuang::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyRobotZhuang*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRobotZhuang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.NotifyRobotZhuang)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_userid;
        break;
      }

      // required int32 userid = 2;
      case 2: {
        if (tag == 16) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.NotifyRobotZhuang)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.NotifyRobotZhuang)
  return false;
#undef DO_
}

void NotifyRobotZhuang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.NotifyRobotZhuang)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->userid(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.NotifyRobotZhuang)
}

::google::protobuf::uint8* NotifyRobotZhuang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.NotifyRobotZhuang)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 userid = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->userid(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.NotifyRobotZhuang)
  return target;
}

int NotifyRobotZhuang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 userid = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRobotZhuang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRobotZhuang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRobotZhuang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRobotZhuang::MergeFrom(const NotifyRobotZhuang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRobotZhuang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRobotZhuang::CopyFrom(const NotifyRobotZhuang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRobotZhuang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NotifyRobotZhuang::Swap(NotifyRobotZhuang* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(userid_, other->userid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRobotZhuang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRobotZhuang_descriptor_;
  metadata.reflection = NotifyRobotZhuang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRobotBetting::kTableidFieldNumber;
const int NotifyRobotBetting::kPercentFieldNumber;
#endif  // !_MSC_VER

NotifyRobotBetting::NotifyRobotBetting()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.game.karting.NotifyRobotBetting)
}

void NotifyRobotBetting::InitAsDefaultInstance() {
}

NotifyRobotBetting::NotifyRobotBetting(const NotifyRobotBetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.game.karting.NotifyRobotBetting)
}

void NotifyRobotBetting::SharedCtor() {
  _cached_size_ = 0;
  tableid_ = 0;
  percent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRobotBetting::~NotifyRobotBetting() {
  // @@protoc_insertion_point(destructor:com.game.karting.NotifyRobotBetting)
  SharedDtor();
}

void NotifyRobotBetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRobotBetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRobotBetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRobotBetting_descriptor_;
}

const NotifyRobotBetting& NotifyRobotBetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_KartingMsg_2eproto();
  return *default_instance_;
}

NotifyRobotBetting* NotifyRobotBetting::default_instance_ = NULL;

NotifyRobotBetting* NotifyRobotBetting::New() const {
  return new NotifyRobotBetting;
}

void NotifyRobotBetting::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NotifyRobotBetting*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tableid_, percent_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRobotBetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.game.karting.NotifyRobotBetting)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tableid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_percent;
        break;
      }

      // required int32 percent = 2;
      case 2: {
        if (tag == 16) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.game.karting.NotifyRobotBetting)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.game.karting.NotifyRobotBetting)
  return false;
#undef DO_
}

void NotifyRobotBetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.game.karting.NotifyRobotBetting)
  // required int32 tableid = 1;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tableid(), output);
  }

  // required int32 percent = 2;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->percent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.game.karting.NotifyRobotBetting)
}

::google::protobuf::uint8* NotifyRobotBetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.game.karting.NotifyRobotBetting)
  // required int32 tableid = 1;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tableid(), target);
  }

  // required int32 percent = 2;
  if (has_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->percent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.game.karting.NotifyRobotBetting)
  return target;
}

int NotifyRobotBetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tableid = 1;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // required int32 percent = 2;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRobotBetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRobotBetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRobotBetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRobotBetting::MergeFrom(const NotifyRobotBetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRobotBetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRobotBetting::CopyFrom(const NotifyRobotBetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRobotBetting::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NotifyRobotBetting::Swap(NotifyRobotBetting* other) {
  if (other != this) {
    std::swap(tableid_, other->tableid_);
    std::swap(percent_, other->percent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRobotBetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRobotBetting_descriptor_;
  metadata.reflection = NotifyRobotBetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace karting
}  // namespace game
}  // namespace com

// @@protoc_insertion_point(global_scope)
